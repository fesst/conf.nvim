name: Setup Environment

on:
  workflow_call:
    inputs:
      setup_python:
        required: true
        type: boolean
        default: true
      setup_rust:
        required: true
        type: boolean
        default: true
      setup_node:
        required: true
        type: boolean
        default: true
      setup_lua:
        required: true
        type: boolean
        default: true
      runner:
        required: true
        type: string
        default: "macos-latest"
    outputs:
      virtual_env:
        description: "Path to virtual environment"
        value: ${{ jobs.setup.outputs.virtual_env }}

jobs:
  setup:
    name: Setup Environment
    runs-on: ${{ inputs.runner }}
    outputs:
      virtual_env: ${{ steps.venv.outputs.virtual_env }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Homebrew packages
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
            /opt/homebrew
            ~/Library/Logs/Homebrew
            /opt/homebrew/Library/Caches
            /opt/homebrew/Library/Logs
          key: ${{ runner.os }}-homebrew-${{ hashFiles('infra/packages/brew.sh') }}-${{ runner.arch }}
          restore-keys: |
            ${{ runner.os }}-homebrew-${{ runner.arch }}-
            ${{ runner.os }}-homebrew-

      - name: Cache npm packages
        if: inputs.setup_node
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('infra/packages/npm.sh') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Cache Cargo packages
        if: inputs.setup_rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('infra/packages/cargo.sh') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache pip packages
        if: inputs.setup_python
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('infra/packages/pip.sh') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache LuaRocks packages
        if: inputs.setup_lua
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/luarocks
            ~/.luarocks
          key: ${{ runner.os }}-luarocks-${{ hashFiles('infra/packages/luarocks.sh') }}
          restore-keys: |
            ${{ runner.os }}-luarocks-

      - name: Set up Python
        if: inputs.setup_python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up Python virtual environment
        if: inputs.setup_python
        id: venv
        shell: bash
        run: |
          set -e
          if [ "$RUNNER_OS" = "Windows" ]; then
            VENV_PATH="$GITHUB_WORKSPACE/.venv"
            python -m venv "$VENV_PATH"
            echo "virtual_env=$VENV_PATH" >> $GITHUB_OUTPUT
            echo "VIRTUAL_ENV=$VENV_PATH" >> $GITHUB_ENV
            echo "$VENV_PATH/Scripts" >> $GITHUB_PATH
            echo "PYTHONPATH=$VENV_PATH/Lib/site-packages:$PYTHONPATH" >> $GITHUB_ENV
            echo "PIP_TARGET=$VENV_PATH/Lib/site-packages" >> $GITHUB_ENV
            echo "PIP_PREFIX=$VENV_PATH" >> $GITHUB_ENV
            source "$VENV_PATH/Scripts/activate"
          else
            VENV_PATH="$GITHUB_WORKSPACE/.venv"
            python -m venv "$VENV_PATH"
            echo "virtual_env=$VENV_PATH" >> $GITHUB_OUTPUT
            echo "VIRTUAL_ENV=$VENV_PATH" >> $GITHUB_ENV
            echo "$VENV_PATH/bin" >> $GITHUB_PATH
            echo "PYTHONPATH=$VENV_PATH/lib/python3.12/site-packages:$PYTHONPATH" >> $GITHUB_ENV
            echo "PIP_TARGET=$VENV_PATH/lib/python3.12/site-packages" >> $GITHUB_ENV
            echo "PIP_PREFIX=$VENV_PATH" >> $GITHUB_ENV
            source "$VENV_PATH/bin/activate"
          fi
          python -m pip install --upgrade pip

      - name: Install system packages
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/brew.sh
          ./infra/packages/brew.sh || {
            echo "Failed to install system packages. Retrying..."
            brew update
            ./infra/packages/brew.sh
          }

      - name: Install Windows packages
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Install required Windows packages using winget
          winget install --id Neovim.Neovim --silent --accept-source-agreements --accept-package-agreements
          winget install --id TreeSitter.TreeSitter --silent --accept-source-agreements --accept-package-agreements
          winget install --id Python.Python.3.12 --silent --accept-source-agreements --accept-package-agreements
          winget install --id OpenJS.NodeJS --silent --accept-source-agreements --accept-package-agreements
          winget install --id Rustlang.Rust --silent --accept-source-agreements --accept-package-agreements

      - name: Install Node.js packages
        if: inputs.setup_node
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/npm.sh
          ./infra/packages/npm.sh || {
            echo "Failed to install Node.js packages. Retrying..."
            npm cache clean --force
            ./infra/packages/npm.sh
          }

      - name: Install Rust packages
        if: inputs.setup_rust
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/cargo.sh
          ./infra/packages/cargo.sh || {
            echo "Failed to install Rust packages. Retrying..."
            cargo clean
            ./infra/packages/cargo.sh
          }

      - name: Install Python packages
        if: inputs.setup_python
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/pip.sh
          if [ "$RUNNER_OS" = "Windows" ]; then
            source "$GITHUB_WORKSPACE/.venv/Scripts/activate"
          else
            source "$GITHUB_WORKSPACE/.venv/bin/activate"
          fi
          ./infra/packages/pip.sh || {
            echo "Failed to install Python packages. Retrying..."
            pip cache purge
            ./infra/packages/pip.sh
          }

      - name: Cache Python venv
        if: inputs.setup_python
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('infra/packages/pip.sh') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Install Lua packages
        if: inputs.setup_lua
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/luarocks.sh
          ./infra/packages/luarocks.sh || {
            echo "Failed to install Lua packages. Retrying..."
            luarocks config --local lua_version 5.4
            ./infra/packages/luarocks.sh
          }

      - name: Install Neovim configuration
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/nvim.sh
          ./infra/packages/nvim.sh || {
            echo "Failed to install Neovim configuration. Retrying..."
            rm -rf ~/.local/share/nvim
            ./infra/packages/nvim.sh
          }
