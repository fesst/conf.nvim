name: Setup Environment

on:
  workflow_call:
    inputs:
      setup_python:
        required: true
        type: boolean
        default: true
      setup_rust:
        required: true
        type: boolean
        default: true
      setup_node:
        required: true
        type: boolean
        default: true
      setup_lua:
        required: true
        type: boolean
        default: true
      runner:
        required: true
        type: string
        default: "macos-latest"
    outputs:
      virtual_env:
        description: "Path to virtual environment"
        value: ${{ jobs.setup-environment.outputs.virtual_env }}

jobs:
  setup-environment:
    name: Setup Environment
    runs-on: ${{ inputs.runner }}
    outputs:
      virtual_env: ${{ steps.venv.outputs.virtual_env }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        if: inputs.setup_node
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.0"

      - name: Cache npm packages
        if: inputs.setup_node
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ runner.arch }}

      - name: Set up Python
        if: inputs.setup_python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install core dependencies
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          echo "Installing core dependencies..."
          brew install neovim tree-sitter
          echo "Verifying installations..."
          nvim --version
          tree-sitter --version

      - name: Cache virtual environment
        if: inputs.setup_python
        uses: actions/cache@v4
        with:
          path: ${{ runner.tool_cache }}/venv
          key: ${{ runner.os }}-venv-${{ hashFiles('infra/packages/pip.sh') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Set up Python virtual environment
        if: inputs.setup_python
        id: venv
        shell: bash
        run: |
          set -euo pipefail
          VENV_PATH="$RUNNER_TOOL_CACHE/venv"

          # Remove existing virtual environment if it exists
          if [ -d "$VENV_PATH" ]; then
            echo "Removing existing virtual environment..."
            rm -rf "$VENV_PATH"
            # Wait for filesystem to sync
            sleep 2
            if [ -d "$VENV_PATH" ]; then
              echo "Error: Failed to remove existing virtual environment"
              exit 1
            fi
          fi

          # Create virtual environment
          echo "Creating virtual environment at: $VENV_PATH"
          python3 -m venv "$VENV_PATH"
          if [ $? -ne 0 ]; then
            echo "Error: Failed to create virtual environment"
            echo "Python version: $(python3 --version)"
            echo "Python path: $(which python3)"
            exit 1
          fi

          # Verify virtual environment was created
          if [ ! -d "$VENV_PATH" ]; then
            echo "Error: Virtual environment directory not found after creation"
            exit 1
          fi

          # Verify activation script exists
          if [ ! -f "$VENV_PATH/bin/activate" ]; then
            echo "Error: Activation script not found at: $VENV_PATH/bin/activate"
            echo "Virtual environment contents:"
            ls -la "$VENV_PATH/bin"
            exit 1
          fi

          # Set output variable
          echo "virtual_env=$VENV_PATH" >> $GITHUB_OUTPUT

          # Activate virtual environment
          source "$VENV_PATH/bin/activate"
          if [ $? -ne 0 ]; then
            echo "Error: Failed to activate virtual environment"
            echo "Python version: $(python --version)"
            echo "PATH: $PATH"
            exit 1
          fi

          # Upgrade pip
          python -m pip install --upgrade pip
          if [ $? -ne 0 ]; then
            echo "Error: Failed to upgrade pip"
            exit 1
          fi

          # Verify installation
          echo "Verifying Python installation..."
          python --version
          pip list

          # Verify output variable was set
          echo "Virtual environment path: $VENV_PATH"
          echo "Output variable set: $GITHUB_OUTPUT"

      - name: Install system packages
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/brew.sh
          ./infra/packages/brew.sh || {
            echo "Failed to install system packages. Retrying..."
            brew update
            ./infra/packages/brew.sh
          }

      - name: Install Node.js packages
        if: inputs.setup_node
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/npm.sh
          ./infra/packages/npm.sh || {
            echo "Failed to install Node.js packages. Retrying..."
            npm cache clean --force
            ./infra/packages/npm.sh
          }

      - name: Install Rust packages
        if: inputs.setup_rust
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/cargo.sh
          ./infra/packages/cargo.sh || {
            echo "Failed to install Rust packages. Retrying..."
            cargo clean
            ./infra/packages/cargo.sh
          }

      - name: Install Python packages
        if: inputs.setup_python
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/pip.sh
          source "$VENV_PATH/bin/activate"
          ./infra/packages/pip.sh || {
            echo "Failed to install Python packages. Retrying..."
            pip cache purge
            ./infra/packages/pip.sh
          }

      - name: Install Lua packages
        if: inputs.setup_lua
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/luarocks.sh
          ./infra/packages/luarocks.sh || {
            echo "Failed to install Lua packages. Retrying..."
            luarocks config --local lua_version 5.4
            ./infra/packages/luarocks.sh
          }

      - name: Install Neovim configuration
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/nvim.sh
          ./infra/packages/nvim.sh || {
            echo "Failed to install Neovim configuration. Retrying..."
            rm -rf ~/.local/share/nvim
            ./infra/packages/nvim.sh
          }

      - name: Full environment setup
        shell: bash
        run: |
          set -e
          chmod +x infra/ci-setup-macos.sh
          ./infra/ci-setup-macos.sh
