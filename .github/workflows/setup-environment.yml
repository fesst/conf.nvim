name: Setup Environment

on:
  workflow_call:
    inputs:
      setup_python:
        required: true
        type: boolean
        default: true
      setup_rust:
        required: true
        type: boolean
        default: true
      setup_node:
        required: true
        type: boolean
        default: true
      setup_lua:
        required: true
        type: boolean
        default: true
      runner:
        required: true
        type: string
        default: "macos-latest"
    outputs:
      virtual_env:
        description: "Path to virtual environment"
        value: ${{ jobs.setup.outputs.virtual_env }}

jobs:
  setup:
    name: Setup Environment
    runs-on: ${{ inputs.runner }}
    outputs:
      virtual_env: ${{ runner.os == 'Windows' && steps.venv-win.outputs.virtual_env || steps.venv-mac.outputs.virtual_env }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Homebrew packages
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
            /opt/homebrew
            ~/Library/Logs/Homebrew
            /opt/homebrew/Library/Caches
            /opt/homebrew/Library/Logs
          key: ${{ runner.os }}-homebrew-${{ hashFiles('infra/packages/brew.sh') }}-${{ runner.arch }}
          restore-keys: |
            ${{ runner.os }}-homebrew-${{ runner.arch }}-
            ${{ runner.os }}-homebrew-

      - name: Cache npm packages
        if: inputs.setup_node
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('infra/packages/npm.sh') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Cache Cargo packages
        if: inputs.setup_rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('infra/packages/cargo.sh') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache pip packages
        if: inputs.setup_python
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('infra/packages/pip.sh') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache LuaRocks packages
        if: inputs.setup_lua
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/luarocks
            ~/.luarocks
          key: ${{ runner.os }}-luarocks-${{ hashFiles('infra/packages/luarocks.sh') }}
          restore-keys: |
            ${{ runner.os }}-luarocks-

      - name: Set up Python
        if: inputs.setup_python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up Python virtual environment (Windows)
        if: inputs.setup_python && runner.os == 'Windows'
        id: venv-win
        shell: pwsh
        run: |
          $VENV_PATH = "$env:GITHUB_WORKSPACE/.venv"
          python -m venv "$VENV_PATH"
          Write-Output "virtual_env=$VENV_PATH" >> $env:GITHUB_OUTPUT
          Write-Output "VIRTUAL_ENV=$VENV_PATH" >> $env:GITHUB_ENV
          Write-Output "$VENV_PATH/Scripts" >> $env:GITHUB_PATH
          Write-Output "PYTHONPATH=$VENV_PATH/Lib/site-packages;$env:PYTHONPATH" >> $env:GITHUB_ENV
          Write-Output "PIP_TARGET=$VENV_PATH/Lib/site-packages" >> $env:GITHUB_ENV
          Write-Output "PIP_PREFIX=$VENV_PATH" >> $env:GITHUB_ENV
          & "$VENV_PATH/Scripts/activate.ps1"
          python -m pip install --upgrade pip

      - name: Set up Python virtual environment (macOS)
        if: inputs.setup_python && runner.os == 'macOS'
        id: venv-mac
        shell: bash
        run: |
          set -e
          VENV_PATH="$GITHUB_WORKSPACE/.venv"
          python -m venv "$VENV_PATH"
          echo "virtual_env=$VENV_PATH" >> $GITHUB_OUTPUT
          echo "VIRTUAL_ENV=$VENV_PATH" >> $GITHUB_ENV
          echo "$VENV_PATH/bin" >> $GITHUB_PATH
          echo "PYTHONPATH=$VENV_PATH/lib/python3.12/site-packages:$PYTHONPATH" >> $GITHUB_ENV
          echo "PIP_TARGET=$VENV_PATH/lib/python3.12/site-packages" >> $GITHUB_ENV
          echo "PIP_PREFIX=$VENV_PATH" >> $GITHUB_ENV
          source "$VENV_PATH/bin/activate"
          python -m pip install --upgrade pip

      - name: Install system packages
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/brew.sh
          ./infra/packages/brew.sh || {
            echo "Failed to install system packages. Retrying..."
            brew update
            ./infra/packages/brew.sh
          }

      - name: Install Windows packages
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Install Chocolatey if not present
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Write-Output "Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }

          # Import Chocolatey profile module
          Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
          refreshenv

          # Install required Windows packages using Chocolatey in parallel
          $jobs = @()

          if ($env:CI -eq "true") {
            # Install Neovim and Tree-sitter first as they're required for tests
            choco install neovim -y
            choco install tree-sitter -y

            # Refresh environment after installations
            refreshenv

            # Add Neovim to PATH immediately
            $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
            $env:Path = "$env:Path;C:\tools\neovim\nvim-win64\bin"

            # Verify Neovim installation
            Write-Output "Verifying Neovim installation..."
            $nvimPath = Get-Command nvim -ErrorAction SilentlyContinue
            if (-not $nvimPath) {
              Write-Error "Neovim not found in PATH after installation"
              Write-Output "Current PATH: $env:Path"
              exit 1
            }
            Write-Output "Neovim found at: $($nvimPath.Source)"
          }

          # Install other packages in parallel
          $packages = @(
            @{Name = "python312"; Condition = ${{ inputs.setup_python }} },
            @{Name = "nodejs"; Condition = ${{ inputs.setup_node }} },
            @{Name = "rust"; Condition = ${{ inputs.setup_rust }} }
          )

          foreach ($package in $packages) {
            if ($package.Condition) {
              $jobs += Start-Job -ScriptBlock {
                param($packageName)
                choco install $packageName -y
              } -ArgumentList $package.Name
            }
          }

          # Wait for all jobs to complete
          $jobs | Wait-Job | Receive-Job

          # Refresh environment after all installations
          refreshenv

          # Install stylua if Rust is being set up
          if (${{ inputs.setup_rust }}) {
            Write-Output "Installing stylua..."
            cargo install stylua

            # Verify stylua installation
            Write-Output "Verifying stylua installation..."
            $styluaPath = Get-Command stylua -ErrorAction SilentlyContinue
            if (-not $styluaPath) {
              Write-Error "stylua not found in PATH after installation"
              Write-Output "Current PATH: $env:Path"
              exit 1
            }
            Write-Output "stylua found at: $($styluaPath.Source)"
          }

          # Final environment refresh
          refreshenv
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          if (${{ inputs.setup_rust }}) {
            $env:Path = "$env:Path;$env:USERPROFILE\.cargo\bin"
          }

      - name: Install Node.js packages
        if: inputs.setup_node
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/npm.sh
          ./infra/packages/npm.sh || {
            echo "Failed to install Node.js packages. Retrying..."
            npm cache clean --force
            ./infra/packages/npm.sh
          }

      - name: Install Rust packages
        if: inputs.setup_rust
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/cargo.sh
          ./infra/packages/cargo.sh || {
            echo "Failed to install Rust packages. Retrying..."
            cargo clean
            ./infra/packages/cargo.sh
          }

      - name: Install Python packages
        if: inputs.setup_python
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/pip.sh
          if [ "$RUNNER_OS" = "Windows" ]; then
            source "$GITHUB_WORKSPACE/.venv/Scripts/activate"
          else
            source "$GITHUB_WORKSPACE/.venv/bin/activate"
          fi
          ./infra/packages/pip.sh || {
            echo "Failed to install Python packages. Retrying..."
            pip cache purge
            ./infra/packages/pip.sh
          }

      - name: Cache Python venv
        if: inputs.setup_python
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('infra/packages/pip.sh') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Install Lua packages
        if: inputs.setup_lua
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/luarocks.sh
          ./infra/packages/luarocks.sh || {
            echo "Failed to install Lua packages. Retrying..."
            luarocks config --local lua_version 5.4
            ./infra/packages/luarocks.sh
          }

      - name: Install Neovim configuration
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/nvim.sh
          ./infra/packages/nvim.sh || {
            echo "Failed to install Neovim configuration. Retrying..."
            rm -rf ~/.local/share/nvim
            ./infra/packages/nvim.sh
          }
