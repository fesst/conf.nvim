name: Test Steps

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
        description: "Platform (macos/windows)"
      venv_path:
        required: true
        type: string
        description: "Path to virtual environment"
      use_cache:
        required: false
        type: boolean
        default: false
        description: "Whether to use caching for packages"
      install_deps:
        required: false
        type: boolean
        default: false
        description: "Whether to install minimal dependencies"

jobs:
  run-tests:
    runs-on: ${{ inputs.platform }}-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Restore Python venv from cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('infra/packages/pip.sh') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Cache Homebrew packages
        if: inputs.platform == 'macos' && inputs.use_cache
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
            /opt/homebrew
            ~/Library/Logs/Homebrew
            /opt/homebrew/Library/Caches
            /opt/homebrew/Library/Logs
          key: ${{ runner.os }}-homebrew-${{ hashFiles('infra/packages/brew.sh') }}-${{ runner.arch }}
          restore-keys: |
            ${{ runner.os }}-homebrew-${{ runner.arch }}-
            ${{ runner.os }}-homebrew-

      - name: Cache LuaRocks packages
        if: inputs.use_cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/luarocks
            ~/.luarocks
            ~/.cache/luarocks-server
            ~/.local/share/luarocks
          key: ${{ runner.os }}-luarocks-${{ hashFiles('infra/packages/luarocks.sh') }}-${{ runner.arch }}
          restore-keys: |
            ${{ runner.os }}-luarocks-${{ runner.arch }}-
            ${{ runner.os }}-luarocks-

      - name: Cache Neovim plugins
        if: inputs.use_cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/nvim
            ~/.config/nvim/plugin
            ~/.config/nvim/lazy
            ~/.local/state/nvim
          key: ${{ runner.os }}-nvim-plugins-${{ hashFiles('lua/**/*.lua', 'after/plugin/**/*.lua', 'infra/packages/nvim.sh') }}-${{ runner.arch }}
          restore-keys: |
            ${{ runner.os }}-nvim-plugins-${{ runner.arch }}-
            ${{ runner.os }}-nvim-plugins-

      - name: Install minimal dependencies
        if: inputs.install_deps
        shell: pwsh
        run: |
          if ("${{ inputs.platform }}" -eq "macos") {
            # Retry brew install with exponential backoff
            for ($i = 1; $i -le 3; $i++) {
              if (brew install neovim tree-sitter) {
                break
              }
              if ($i -eq 3) {
                Write-Error "Failed to install dependencies after 3 attempts"
                exit 1
              }
              Start-Sleep -Seconds (2 ** $i)
            }
          } elseif ("${{ inputs.platform }}" -eq "windows") {
            # Check if winget is available in PATH
            if (-not (Get-Command winget -ErrorAction SilentlyContinue)) {
              Write-Output "Installing Windows Package Manager (winget)..."

              # Download the latest winget release
              $wingetUrl = "https://github.com/microsoft/winget-cli/releases/latest/download/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle"
              $wingetPath = "$env:TEMP\winget.msixbundle"
              Invoke-WebRequest -Uri $wingetUrl -OutFile $wingetPath

              # Install winget
              Add-AppxPackage -Path $wingetPath

              # Refresh environment variables
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

              # Verify installation
              if (-not (Get-Command winget -ErrorAction SilentlyContinue)) {
                Write-Error "Failed to install Windows Package Manager"
                exit 1
              }
            }

            # Install dependencies using winget
            winget install --id Neovim.Neovim --silent --accept-source-agreements --accept-package-agreements
            winget install --id TreeSitter.TreeSitter --silent --accept-source-agreements --accept-package-agreements
          }

          if ("${{ inputs.platform }}" -eq "windows") {
            & "${{ inputs.venv_path }}/Scripts/activate.ps1"
          } else {
            source "${{ inputs.venv_path }}/bin/activate"
          }
          $env:CI = "true"
          ./infra/install.sh

      - name: Run basic Neovim tests
        shell: pwsh
        run: |
          if ("${{ inputs.platform }}" -eq "windows") {
            & "${{ inputs.venv_path }}/Scripts/activate.ps1"
          } else {
            source "${{ inputs.venv_path }}/bin/activate"
          }
          nvim --headless -c "lua require('test.core')" -c "quit"

      - name: Run LSP tests
        shell: pwsh
        run: |
          if ("${{ inputs.platform }}" -eq "windows") {
            & "${{ inputs.venv_path }}/Scripts/activate.ps1"
          } else {
            source "${{ inputs.venv_path }}/bin/activate"
          }
          nvim --headless -c "lua require('test.lsp')" -c "quit"

      - name: Run Treesitter tests
        shell: pwsh
        run: |
          if ("${{ inputs.platform }}" -eq "windows") {
            & "${{ inputs.venv_path }}/Scripts/activate.ps1"
          } else {
            source "${{ inputs.venv_path }}/bin/activate"
          }
          nvim --headless -c "lua require('test.treesitter')" -c "quit"

      - name: Check formatting
        shell: pwsh
        run: |
          if ("${{ inputs.platform }}" -eq "windows") {
            & "${{ inputs.venv_path }}/Scripts/activate.ps1"
          } else {
            source "${{ inputs.venv_path }}/bin/activate"
          }
          stylua --check lua/
          stylua --check after/plugin/

      - name: Run sanity tests
        if: inputs.install_deps
        shell: pwsh
        run: |
          if ("${{ inputs.platform }}" -eq "windows") {
            & "${{ inputs.venv_path }}/Scripts/activate.ps1"
          } else {
            source "${{ inputs.venv_path }}/bin/activate"
          }
          ./infra/nvim_sanity_test.sh > test-results.log 2>&1; $test_exit_code = $LASTEXITCODE

          # Display test results
          Write-Output "Test results:"
          Get-Content test-results.log

          # Exit with the test exit code
          exit $test_exit_code
