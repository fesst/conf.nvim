name: Test Steps

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
        description: "Platform (macos/windows)"
      venv_path:
        required: true
        type: string
        description: "Path to virtual environment"
      use_cache:
        required: false
        type: boolean
        default: false
        description: "Whether to use caching for packages"
      install_deps:
        required: false
        type: boolean
        default: false
        description: "Whether to install minimal dependencies"
      setup_python:
        required: false
        type: boolean
        default: false
        description: "Whether to use the setup file for virtual environment"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.job }}-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  cache:
    if: inputs.use_cache
    uses: ./.github/workflows/cache-config.yml
    with:
      platform: ${{ inputs.platform }}
      setup_python: ${{ inputs.setup_python }}
      setup_node: true

  run-tests:
    needs: cache
    runs-on: ${{ inputs.platform }}-latest
    steps:
      - name: Debug environment
        shell: bash
        run: |
          echo "=== Environment Debug Info ==="
          echo "Platform: ${{ inputs.platform }}"
          echo "venv_path: ${{ inputs.venv_path }}"
          echo "use_cache: ${{ inputs.use_cache }}"
          echo "install_deps: ${{ inputs.install_deps }}"
          echo "setup_python: ${{ inputs.setup_python }}"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "==========================="

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        if: inputs.setup_python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Set up virtual environment
        if: inputs.setup_python
        shell: bash
        run: |
          set -euo pipefail
          VENV_PATH="${{ inputs.venv_path }}"

          # Create virtual environment if it doesn't exist
          if [ ! -d "$VENV_PATH" ]; then
            echo "Creating virtual environment at: $VENV_PATH"
            python3 -m venv "$VENV_PATH"
            if [ $? -ne 0 ]; then
              echo "Error: Failed to create virtual environment"
              echo "Python version: $(python3 --version)"
              echo "Python path: $(which python3)"
              exit 1
            fi
          fi

          # Verify virtual environment exists
          if [ ! -d "$VENV_PATH" ]; then
            echo "Error: Virtual environment directory not found"
            exit 1
          fi

          # Activate virtual environment based on platform
          if [ "${{ inputs.platform }}" == "windows" ]; then
            if [ ! -f "$VENV_PATH/Scripts/activate" ]; then
              echo "Error: Windows activation script not found"
              exit 1
            fi
            source "$VENV_PATH/Scripts/activate"
          else
            if [ ! -f "$VENV_PATH/bin/activate" ]; then
              echo "Error: Unix activation script not found"
              exit 1
            fi
            source "$VENV_PATH/bin/activate"
          fi

          # Verify activation
          if ! command -v python &> /dev/null; then
            echo "Error: Python not found in PATH after activation"
            exit 1
          fi

          echo "Python version: $(python --version)"
          echo "Python path: $(which python)"
          echo "Virtual environment: $VIRTUAL_ENV"

      - name: Install dependencies
        if: inputs.install_deps
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ inputs.platform }}" == "windows" ]; then
            source "${{ inputs.venv_path }}/Scripts/activate"
          else
            source "${{ inputs.venv_path }}/bin/activate"
          fi
          pip install pynvim black flake8 isort pytest --no-cache-dir

      - name: Run tests
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ inputs.platform }}" == "windows" ]; then
            source "${{ inputs.venv_path }}/Scripts/activate"
          else
            source "${{ inputs.venv_path }}/bin/activate"
          fi
          python -m pytest tests/
