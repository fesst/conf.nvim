name: Test Steps

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
        description: "Platform (macos/windows)"
      venv_path:
        required: true
        type: string
        description: "Path to virtual environment"
      use_cache:
        required: false
        type: boolean
        default: false
        description: "Whether to use caching for packages"
      install_deps:
        required: false
        type: boolean
        default: false
        description: "Whether to install minimal dependencies"
      setup_python:
        required: false
        type: boolean
        default: false
        description: "Whether to use the setup file for virtual environment"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.job }}-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  run-tests:
    runs-on: ${{ inputs.platform }}-latest
    steps:
      - name: Debug environment
        shell: bash
        run: |
          echo "=== Environment Debug Info ==="
          echo "Platform: ${{ inputs.platform }}"
          echo "venv_path: ${{ inputs.venv_path }}"
          echo "use_cache: ${{ inputs.use_cache }}"
          echo "install_deps: ${{ inputs.install_deps }}"
          echo "setup_python: ${{ inputs.setup_python }}"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "==========================="

      - name: Debug Windows environment
        if: inputs.platform == 'windows'
        shell: pwsh
        run: |
          Write-Output "=== Windows Environment Debug Info ==="
          Write-Output "Current directory: $(Get-Location)"
          Write-Output "Directory contents:"
          Get-ChildItem
          Write-Output "Environment variables:"
          Get-ChildItem env: | Format-Table -AutoSize
          Write-Output "PATH: $env:Path"
          Write-Output "Python version: $(python --version)"
          Write-Output "================================"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Log Python venv cache info
        shell: bash
        run: |
          echo "=== Python venv Cache Info ==="
          echo "Cache path: ${{ runner.tool_cache }}/venv"
          echo "Cache key: ${{ runner.os }}-${{ runner.arch }}-venv-${{ hashFiles('infra/packages/pip.sh', 'infra/packages/pip.ps1') }}"
          echo "Cache size: $(du -sh ${{ runner.tool_cache }}/venv 2>/dev/null || echo 'Not found')"
          echo "==========================="

      - name: Restore Python venv from cache
        uses: actions/cache@v4
        id: python-venv-cache
        with:
          path: ${{ runner.tool_cache }}/venv
          key: ${{ runner.os }}-${{ runner.arch }}-venv-${{ hashFiles('infra/packages/pip.sh', 'infra/packages/pip.ps1') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-venv-

      - name: Log Python venv cache result
        shell: bash
        run: |
          echo "=== Python venv Cache Result ==="
          echo "Cache hit: ${{ steps.python-venv-cache.outputs.cache-hit }}"
          echo "Cache size after restore: $(du -sh ${{ runner.tool_cache }}/venv 2>/dev/null || echo 'Not found')"
          echo "=============================="

      - name: Verify virtual environment path
        if: inputs.setup_python
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          # Get virtual environment path from setup
          $venvPath = "${{ steps.setup.outputs.virtual_env }}"
          Write-Output "Virtual environment path from setup: $venvPath"

          # Debug path information
          Write-Output "=== Virtual Environment Path Debug ==="
          Write-Output "Raw venv_path: ${{ inputs.venv_path }}"
          Write-Output "Setup output venv_path: $venvPath"
          Write-Output "Current directory: $(Get-Location)"
          Write-Output "Directory contents:"
          Get-ChildItem
          Write-Output "================================"

          # Normalize path for Windows
          if ($IsWindows) {
              $venvPath = [System.IO.Path]::GetFullPath($venvPath)
              Write-Output "Normalized path for Windows: $venvPath"

              # Debug normalized path
              Write-Output "=== Normalized Path Debug ==="
              Write-Output "Full path: $venvPath"
              Write-Output "Parent directory exists: $(Test-Path (Split-Path -Parent $venvPath))"
              Write-Output "Parent directory contents:"
              Get-ChildItem (Split-Path -Parent $venvPath)
              Write-Output "=========================="
          }

          # Verify virtual environment exists
          if (-not (Test-Path $venvPath)) {
              Write-Error "Virtual environment not found at: $venvPath"
              Write-Output "Current directory: $(Get-Location)"
              Write-Output "Directory contents:"
              Get-ChildItem
              exit 1
          }

          # Verify activation script exists
          $activateScript = if ($IsWindows) {
              Join-Path $venvPath "Scripts\Activate.ps1"
          } else {
              Join-Path $venvPath "bin/activate"
          }

          Write-Output "=== Activation Script Debug ==="
          Write-Output "Activation script path: $activateScript"
          Write-Output "Script exists: $(Test-Path $activateScript)"
          if (Test-Path $activateScript) {
              Write-Output "Script contents:"
              Get-Content $activateScript
          }
          Write-Output "============================"

          if (-not (Test-Path $activateScript)) {
              Write-Error "Activation script not found at: $activateScript"
              Write-Output "Virtual environment contents:"
              Get-ChildItem $venvPath -Recurse
              exit 1
          }

          # Activate virtual environment
          Write-Output "=== Activation Debug ==="
          Write-Output "Current PATH: $env:Path"
          Write-Output "Current Python: $(Get-Command python | Select-Object -ExpandProperty Source)"
          Write-Output "========================="

          . $activateScript
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to activate virtual environment"
              Write-Output "Python version: $(python --version)"
              Write-Output "PATH: $env:Path"
              exit 1
          }

          Write-Output "=== Post-Activation Debug ==="
          Write-Output "Updated PATH: $env:Path"
          Write-Output "Updated Python: $(Get-Command python | Select-Object -ExpandProperty Source)"
          Write-Output "============================"

          # Verify Python is using the virtual environment
          $pythonPath = (Get-Command python | Select-Object -ExpandProperty Source)
          if (-not $pythonPath.StartsWith($venvPath)) {
              Write-Error "Python is not using the virtual environment"
              Write-Output "Expected Python path to start with: $venvPath"
              Write-Output "Actual Python path: $pythonPath"
              exit 1
          }

      - name: Log Homebrew cache info
        if: inputs.platform == 'macos' && inputs.use_cache
        shell: bash
        run: |
          echo "=== Homebrew Cache Info ==="
          echo "Cache paths:"
          echo "- ~/Library/Caches/Homebrew"
          echo "- /usr/local/Homebrew"
          echo "- /opt/homebrew"
          echo "- ~/Library/Logs/Homebrew"
          echo "- /opt/homebrew/Library/Caches"
          echo "- /opt/homebrew/Library/Logs"
          echo "Cache key: ${{ runner.os }}-${{ runner.arch }}-homebrew-${{ hashFiles('infra/packages/brew.sh') }}"
          echo "========================="

      - name: Cache Homebrew packages
        if: inputs.platform == 'macos' && inputs.use_cache
        uses: actions/cache@v4
        id: homebrew-cache
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
            /opt/homebrew
            ~/Library/Logs/Homebrew
            /opt/homebrew/Library/Caches
            /opt/homebrew/Library/Logs
          key: ${{ runner.os }}-${{ runner.arch }}-homebrew-${{ hashFiles('infra/packages/brew.sh') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-homebrew-

      - name: Log Homebrew cache result
        if: inputs.platform == 'macos' && inputs.use_cache
        shell: bash
        run: |
          echo "=== Homebrew Cache Result ==="
          echo "Cache hit: ${{ steps.homebrew-cache.outputs.cache-hit }}"
          echo "Cache sizes:"
          du -sh ~/Library/Caches/Homebrew /usr/local/Homebrew /opt/homebrew 2>/dev/null || echo "Not found"
          echo "==========================="

      - name: Log LuaRocks cache info
        if: inputs.use_cache
        shell: bash
        run: |
          echo "=== LuaRocks Cache Info ==="
          echo "Cache paths:"
          echo "- ${{ runner.os == 'Windows' && format('{0}\\.cache\\luarocks', env.USERPROFILE) || '~/.cache/luarocks' }}"
          echo "- ${{ runner.os == 'Windows' && format('{0}\\.luarocks', env.USERPROFILE) || '~/.luarocks' }}"
          echo "- ${{ runner.os == 'Windows' && format('{0}\\.local\\share\\luarocks', env.USERPROFILE) || '~/.local/share/luarocks' }}"
          echo "Cache key: ${{ runner.os }}-${{ runner.arch }}-luarocks-${{ hashFiles('infra/packages/luarocks.sh') }}"
          echo "========================="

      - name: Cache LuaRocks packages
        if: inputs.use_cache
        uses: actions/cache@v4
        id: luarocks-cache
        with:
          path: |
            ${{ runner.os == 'Windows' && format('{0}\\.cache\\luarocks', env.USERPROFILE) || '~/.cache/luarocks' }}
            ${{ runner.os == 'Windows' && format('{0}\\.luarocks', env.USERPROFILE) || '~/.luarocks' }}
            ${{ runner.os == 'Windows' && format('{0}\\.local\\share\\luarocks', env.USERPROFILE) || '~/.local/share/luarocks' }}
          key: ${{ runner.os }}-${{ runner.arch }}-luarocks-${{ hashFiles('infra/packages/luarocks.sh') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-luarocks-

      - name: Log LuaRocks cache result
        if: inputs.use_cache
        shell: bash
        run: |
          echo "=== LuaRocks Cache Result ==="
          echo "Cache hit: ${{ steps.luarocks-cache.outputs.cache-hit }}"
          echo "Cache sizes:"
          if [ "${{ runner.os }}" == "Windows" ]; then
            du -sh "${{ format('{0}\\.cache\\luarocks', env.USERPROFILE) }}" "${{ format('{0}\\.luarocks', env.USERPROFILE) }}" "${{ format('{0}\\.local\\share\\luarocks', env.USERPROFILE) }}" 2>/dev/null || echo "Not found"
          else
            du -sh ~/.cache/luarocks ~/.luarocks ~/.local/share/luarocks 2>/dev/null || echo "Not found"
          fi
          echo "==========================="

      - name: Log Neovim plugins cache info
        if: inputs.use_cache
        shell: bash
        run: |
          echo "=== Neovim Plugins Cache Info ==="
          echo "Cache paths:"
          echo "- ${{ runner.os == 'Windows' && format('{0}\\.local\\share\\nvim', env.USERPROFILE) || '~/.local/share/nvim' }}"
          echo "- ${{ runner.os == 'Windows' && format('{0}\\.config\\nvim\\plugin', env.USERPROFILE) || '~/.config/nvim/plugin' }}"
          echo "- ${{ runner.os == 'Windows' && format('{0}\\.config\\nvim\\lazy', env.USERPROFILE) || '~/.config/nvim/lazy' }}"
          echo "- ${{ runner.os == 'Windows' && format('{0}\\.local\\state\\nvim', env.USERPROFILE) || '~/.local/state/nvim' }}"
          echo "- ${{ runner.os == 'Windows' && format('{0}\\.cache\\nvim', env.USERPROFILE) || '~/.cache/nvim' }}"
          echo "Cache key: ${{ runner.os }}-${{ runner.arch }}-nvim-plugins-${{ hashFiles('lua/**/*.lua', 'after/plugin/**/*.lua', 'infra/packages/nvim.sh') }}"
          echo "=============================="

      - name: Cache Neovim plugins
        if: inputs.use_cache
        uses: actions/cache@v4
        id: nvim-plugins-cache
        with:
          path: |
            ${{ runner.os == 'Windows' && format('{0}\\.local\\share\\nvim', env.USERPROFILE) || '~/.local/share/nvim' }}
            ${{ runner.os == 'Windows' && format('{0}\\.config\\nvim\\plugin', env.USERPROFILE) || '~/.config/nvim/plugin' }}
            ${{ runner.os == 'Windows' && format('{0}\\.config\\nvim\\lazy', env.USERPROFILE) || '~/.config/nvim/lazy' }}
            ${{ runner.os == 'Windows' && format('{0}\\.local\\state\\nvim', env.USERPROFILE) || '~/.local/state/nvim' }}
            ${{ runner.os == 'Windows' && format('{0}\\.cache\\nvim', env.USERPROFILE) || '~/.cache/nvim' }}
          key: ${{ runner.os }}-${{ runner.arch }}-nvim-plugins-${{ hashFiles('lua/**/*.lua', 'after/plugin/**/*.lua', 'infra/packages/nvim.sh') }}

      - name: Log Neovim plugins cache result
        if: inputs.use_cache
        shell: bash
        run: |
          echo "=== Neovim Plugins Cache Result ==="
          echo "Cache hit: ${{ steps.nvim-plugins-cache.outputs.cache-hit }}"
          echo "Cache sizes:"
          if [ "${{ runner.os }}" == "Windows" ]; then
            du -sh "${{ format('{0}\\.local\\share\\nvim', env.USERPROFILE) }}" "${{ format('{0}\\.config\\nvim\\plugin', env.USERPROFILE) }}" "${{ format('{0}\\.config\\nvim\\lazy', env.USERPROFILE) }}" 2>/dev/null || echo "Not found"
          else
            du -sh ~/.local/share/nvim ~/.config/nvim/plugin ~/.config/nvim/lazy 2>/dev/null || echo "Not found"
          fi
          echo "================================"

      - name: Install minimal dependencies (Windows)
        if: inputs.install_deps && inputs.platform == 'windows'
        shell: pwsh
        run: |
          try {
            # Get the virtual environment path from the setup step
            $venvPath = "${{ steps.setup.outputs.virtual_env }}"
            if (-not $venvPath) {
              # Fallback to the input path if setup output is not available
              $venvPath = "${{ inputs.venv_path }}"
            }
            Write-Output "Using virtual environment at: $venvPath"

            # Normalize the path for Windows
            $venvPath = [System.IO.Path]::GetFullPath($venvPath)
            Write-Output "Normalized path: $venvPath"

            # Create parent directory if it doesn't exist
            $parentDir = Split-Path -Parent $venvPath
            if (-not (Test-Path $parentDir)) {
              Write-Output "Creating parent directory: $parentDir"
              New-Item -ItemType Directory -Path $parentDir -Force | Out-Null
            }

            # Verify virtual environment exists
            if (-not (Test-Path $venvPath)) {
              Write-Error "Virtual environment not found at: $venvPath"
              Write-Output "Current directory: $(Get-Location)"
              Write-Output "Directory contents:"
              Get-ChildItem
              Write-Output "Parent directory contents:"
              Get-ChildItem $parentDir
              exit 1
            }

            # Verify activation script exists
            $activateScript = Join-Path $venvPath "Scripts\activate.ps1"
            if (-not (Test-Path $activateScript)) {
              Write-Error "Activation script not found at: $activateScript"
              Write-Output "Virtual environment contents:"
              Get-ChildItem $venvPath -Recurse
              exit 1
            }

            # Activate virtual environment
            Write-Output "Activating virtual environment..."
            . $activateScript
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to activate virtual environment"
              Write-Output "Python version: $(python --version)"
              Write-Output "PATH: $env:Path"
              exit 1
            }

            # Verify Python is using the virtual environment
            $pythonPath = (Get-Command python | Select-Object -ExpandProperty Source)
            if (-not $pythonPath.StartsWith($venvPath)) {
              Write-Error "Python is not using the virtual environment"
              Write-Output "Expected Python path to start with: $venvPath"
              Write-Output "Actual Python path: $pythonPath"
              exit 1
            }

            # Run install script
            $env:CI = "true"
            Write-Output "Running install script..."

            # Function to check if a package is installed
            function Test-ChocolateyPackage {
                param($PackageName)
                $package = choco list --local-only --exact $PackageName
                return $package -match "^$PackageName\s"
            }

            # Install packages using Chocolatey only if not already installed
            $packages = @(
                @{Name = "neovim"; Installed = $false}
                @{Name = "tree-sitter"; Installed = $false}
            )

            foreach ($package in $packages) {
                if (-not (Test-ChocolateyPackage $package.Name)) {
                    Write-Output "Installing $($package.Name)..."
                    choco install $package.Name -y
                    if ($LASTEXITCODE -ne 0) {
                        throw "Failed to install $($package.Name)"
                    }
                } else {
                    Write-Output "$($package.Name) is already installed"
                }
            }

            # Use PowerShell script with Chocolatey
            Write-Output "Running PowerShell install script..."
            & "${{ github.workspace }}/infra/install.ps1" -UseChocolatey
            if ($LASTEXITCODE -ne 0) {
              throw "Failed to run PowerShell install script"
            }
          } catch {
            Write-Error $_.Exception.Message
            Write-Output "Current directory: $(Get-Location)"
            Write-Output "Directory contents: $(Get-ChildItem)"
            Write-Output "Environment variables:"
            Get-ChildItem env: | Format-Table -AutoSize
            Write-Output "PATH: $env:Path"
            exit 1
          }

      - name: Install minimal dependencies (macOS)
        if: inputs.install_deps && inputs.platform == 'macos'
        shell: bash
        run: |
          set -e
          # Verify virtual environment path
          if [ ! -d "${{ inputs.venv_path }}" ]; then
            echo "Error: Virtual environment not found at: ${{ inputs.venv_path }}"
            echo "Current directory: $(pwd)"
            echo "Directory contents:"
            ls -la
            exit 1
          fi

          # Verify activation script exists
          if [ ! -f "${{ inputs.venv_path }}/bin/activate" ]; then
            echo "Error: Activation script not found at: ${{ inputs.venv_path }}/bin/activate"
            echo "Virtual environment contents:"
            ls -la "${{ inputs.venv_path }}/bin"
            exit 1
          fi

          # Retry brew install with exponential backoff
          for i in {1..3}; do
            if brew install neovim tree-sitter; then
              break
            fi
            if [ $i -eq 3 ]; then
              echo "Failed to install dependencies after 3 attempts"
              exit 1
            fi
            sleep $((2 ** i))
          done

          # Activate virtual environment with error handling
          echo "Activating virtual environment at: ${{ inputs.venv_path }}"
          source "${{ inputs.venv_path }}/bin/activate" || {
            echo "Error: Failed to activate virtual environment"
            echo "Python version: $(python --version)"
            echo "PATH: $PATH"
            exit 1
          }

          # Verify Python is available after activation
          if ! command -v python &> /dev/null; then
            echo "Error: Python not found in PATH after activation"
            echo "PATH: $PATH"
            exit 1
          fi

          export CI=true
          bash infra/install.sh

      - name: Run Lua tests (Windows)
        if: inputs.platform == 'windows'
        shell: pwsh
        run: |
          try {
            & "${{ inputs.venv_path }}/Scripts/activate.ps1"
            # Ensure Neovim is in PATH and verify it
            $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
            $env:Path = "$env:Path;C:\tools\neovim\nvim-win64\bin"

            # Verify Neovim is available
            $nvimPath = Get-Command nvim -ErrorAction SilentlyContinue
            if (-not $nvimPath) {
              throw "Neovim not found in PATH before running tests. Current PATH: $env:Path"
            }
            Write-Output "Using Neovim from: $($nvimPath.Source)"

            # Set up Lua environment
            $env:LUA_PATH = "?.lua;?/init.lua;../lua/?.lua;../lua/?/init.lua"
            $env:LUA_CPATH = "?.dll;?/init.dll;../lua/?.dll;../lua/?/init.dll"

            # Run the test
            nvim --headless -c "lua require('test.lua.test_print_table')" -c "quit"
            if ($LASTEXITCODE -ne 0) {
              throw "Test failed with exit code $LASTEXITCODE"
            }
          } catch {
            Write-Error $_.Exception.Message
            exit 1
          }

      - name: Run Lua tests (macOS)
        if: inputs.platform == 'macos'
        shell: bash
        run: |
          set -e
          source "${{ inputs.venv_path }}/bin/activate"

          # Verify Neovim is available
          if ! command -v nvim &> /dev/null; then
            echo "Error: Neovim not found in PATH before running tests"
            echo "Current PATH: $PATH"
            exit 1
          fi
          echo "Using Neovim from: $(which nvim)"

          # Set up Lua environment
          export LUA_PATH="?.lua;?/init.lua;../lua/?.lua;../lua/?/init.lua"
          export LUA_CPATH="?.so;?/init.so;../lua/?.so;../lua/?/init.so"

          # Run the test
          nvim --headless -c "lua require('test.lua.test_print_table')" -c "quit"
          if [ $? -ne 0 ]; then
            echo "Error: Test failed with exit code $?"
            exit 1
          fi

      - name: Check formatting (Windows)
        if: inputs.platform == 'windows'
        shell: pwsh
        run: |
          try {
            & "${{ inputs.venv_path }}/Scripts/activate.ps1"
            # Ensure stylua is in PATH
            $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
            $env:Path = "$env:Path;$env:USERPROFILE\.cargo\bin"

            # Verify stylua is available
            $styluaPath = Get-Command stylua -ErrorAction SilentlyContinue
            if (-not $styluaPath) {
              throw "stylua not found in PATH. Current PATH: $env:Path"
            }
            Write-Output "Using stylua from: $($styluaPath.Source)"

            # Check formatting
            stylua --check lua/
            if ($LASTEXITCODE -ne 0) {
              throw "Format check failed for lua/ directory"
            }
            stylua --check after/plugin/
            if ($LASTEXITCODE -ne 0) {
              throw "Format check failed for after/plugin/ directory"
            }
          } catch {
            Write-Error $_.Exception.Message
            exit 1
          }

      - name: Check formatting (macOS)
        if: inputs.platform == 'macos'
        shell: bash
        run: |
          set -e
          source "${{ inputs.venv_path }}/bin/activate"

          # Verify stylua is available
          if ! command -v stylua &> /dev/null; then
            echo "Error: stylua not found in PATH"
            echo "Current PATH: $PATH"
            exit 1
          fi
          echo "Using stylua from: $(which stylua)"

          # Check formatting
          stylua --check lua/
          if [ $? -ne 0 ]; then
            echo "Error: Format check failed for lua/ directory"
            exit 1
          fi
          stylua --check after/plugin/
          if [ $? -ne 0 ]; then
            echo "Error: Format check failed for after/plugin/ directory"
            exit 1
          fi

      - name: Run sanity tests (Windows)
        if: inputs.install_deps && inputs.platform == 'windows'
        shell: pwsh
        run: |
          & "${{ inputs.venv_path }}/Scripts/activate.ps1"
          # Ensure all tools are in PATH
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          $env:Path = "$env:Path;C:\tools\neovim\nvim-win64\bin;$env:USERPROFILE\.cargo\bin"

          # Run tests and capture output
          $testOutput = & bash infra/nvim_sanity_test.sh 2>&1
          $test_exit_code = $LASTEXITCODE

          # Display test results
          Write-Output "Test results:"
          $testOutput

          # Exit with the test exit code
          exit $test_exit_code

      - name: Run sanity tests (macOS)
        if: inputs.install_deps && inputs.platform == 'macos'
        shell: bash
        run: |
          source "${{ inputs.venv_path }}/bin/activate"

          # Run tests and capture output
          test_output=$(bash infra/nvim_sanity_test.sh 2>&1)
          test_exit_code=$?

          # Display test results
          echo "Test results:"
          echo "$test_output"

          # Exit with the test exit code
          exit $test_exit_code
