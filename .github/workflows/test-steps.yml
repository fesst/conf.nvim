name: Test Steps

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
        description: "Platform (macos/windows)"
      venv_path:
        required: true
        type: string
        description: "Path to virtual environment"
      use_cache:
        required: false
        type: boolean
        default: false
        description: "Whether to use caching for packages"
      install_deps:
        required: false
        type: boolean
        default: false
        description: "Whether to install minimal dependencies"

jobs:
  run-tests:
    runs-on: ${{ inputs.platform }}-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Restore Python venv from cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('infra/packages/pip.sh') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Cache Homebrew packages
        if: inputs.platform == 'macos' && inputs.use_cache
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
            /opt/homebrew
            ~/Library/Logs/Homebrew
            /opt/homebrew/Library/Caches
            /opt/homebrew/Library/Logs
          key: ${{ runner.os }}-homebrew-${{ hashFiles('infra/packages/brew.sh') }}-${{ runner.arch }}
          restore-keys: |
            ${{ runner.os }}-homebrew-${{ runner.arch }}-
            ${{ runner.os }}-homebrew-

      - name: Cache LuaRocks packages
        if: inputs.use_cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/luarocks
            ~/.luarocks
            ~/.cache/luarocks-server
            ~/.local/share/luarocks
          key: ${{ runner.os }}-luarocks-${{ hashFiles('infra/packages/luarocks.sh') }}-${{ runner.arch }}
          restore-keys: |
            ${{ runner.os }}-luarocks-${{ runner.arch }}-
            ${{ runner.os }}-luarocks-

      - name: Cache Neovim plugins
        if: inputs.use_cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/nvim
            ~/.config/nvim/plugin
            ~/.config/nvim/lazy
            ~/.local/state/nvim
          key: ${{ runner.os }}-nvim-plugins-${{ hashFiles('lua/**/*.lua', 'after/plugin/**/*.lua', 'infra/packages/nvim.sh') }}-${{ runner.arch }}
          restore-keys: |
            ${{ runner.os }}-nvim-plugins-${{ runner.arch }}-
            ${{ runner.os }}-nvim-plugins-

      - name: Install minimal dependencies (Windows)
        if: inputs.install_deps && inputs.platform == 'windows'
        shell: pwsh
        run: |
          # Install Chocolatey if not present
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Write-Output "Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }

          # Install dependencies using Chocolatey
          choco install neovim -y
          choco install tree-sitter -y

          # Add Chocolatey bin to PATH and refresh environment
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          $env:Path = "$env:Path;C:\tools\neovim\nvim-win64\bin"

          # Verify Neovim installation
          Write-Output "Verifying Neovim installation..."
          $nvimPath = Get-Command nvim -ErrorAction SilentlyContinue
          if (-not $nvimPath) {
            Write-Error "Neovim not found in PATH after installation"
            Write-Output "Current PATH: $env:Path"
            exit 1
          }
          Write-Output "Neovim found at: $($nvimPath.Source)"

          & "${{ inputs.venv_path }}/Scripts/activate.ps1"
          $env:CI = "true"
          ./infra/install.sh

      - name: Install minimal dependencies (macOS)
        if: inputs.install_deps && inputs.platform == 'macos'
        shell: bash
        run: |
          # Retry brew install with exponential backoff
          for i in {1..3}; do
            if brew install neovim tree-sitter; then
              break
            fi
            if [ $i -eq 3 ]; then
              echo "Failed to install dependencies after 3 attempts"
              exit 1
            fi
            sleep $((2 ** i))
          done

          source "${{ inputs.venv_path }}/bin/activate"
          export CI=true
          ./infra/install.sh

      - name: Run Lua tests (Windows)
        if: inputs.platform == 'windows'
        shell: pwsh
        run: |
          & "${{ inputs.venv_path }}/Scripts/activate.ps1"
          # Ensure Neovim is in PATH and verify it
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          $env:Path = "$env:Path;C:\tools\neovim\nvim-win64\bin"

          # Verify Neovim is available
          $nvimPath = Get-Command nvim -ErrorAction SilentlyContinue
          if (-not $nvimPath) {
            Write-Error "Neovim not found in PATH before running tests"
            Write-Output "Current PATH: $env:Path"
            exit 1
          }
          Write-Output "Using Neovim from: $($nvimPath.Source)"
          nvim --headless -c "lua require('test.lua.test_print_table')" -c "quit"

      - name: Run Lua tests (macOS)
        if: inputs.platform == 'macos'
        shell: bash
        run: |
          source "${{ inputs.venv_path }}/bin/activate"
          nvim --headless -c "lua require('test.lua.test_print_table')" -c "quit"

      - name: Check formatting (Windows)
        if: inputs.platform == 'windows'
        shell: pwsh
        run: |
          & "${{ inputs.venv_path }}/Scripts/activate.ps1"
          # Ensure stylua is in PATH
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          $env:Path = "$env:Path;$env:USERPROFILE\.cargo\bin"
          stylua --check lua/
          stylua --check after/plugin/

      - name: Check formatting (macOS)
        if: inputs.platform == 'macos'
        shell: bash
        run: |
          source "${{ inputs.venv_path }}/bin/activate"
          stylua --check lua/
          stylua --check after/plugin/

      - name: Run sanity tests (Windows)
        if: inputs.install_deps && inputs.platform == 'windows'
        shell: pwsh
        run: |
          & "${{ inputs.venv_path }}/Scripts/activate.ps1"
          # Ensure all tools are in PATH
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          $env:Path = "$env:Path;C:\tools\neovim\nvim-win64\bin;$env:USERPROFILE\.cargo\bin"
          ./infra/nvim_sanity_test.sh > test-results.log 2>&1; $test_exit_code = $LASTEXITCODE

          # Display test results
          Write-Output "Test results:"
          Get-Content test-results.log

          # Exit with the test exit code
          exit $test_exit_code

      - name: Run sanity tests (macOS)
        if: inputs.install_deps && inputs.platform == 'macos'
        shell: bash
        run: |
          source "${{ inputs.venv_path }}/bin/activate"
          ./infra/nvim_sanity_test.sh > test-results.log 2>&1
          test_exit_code=$?

          # Display test results
          echo "Test results:"
          cat test-results.log

          # Exit with the test exit code
          exit $test_exit_code
