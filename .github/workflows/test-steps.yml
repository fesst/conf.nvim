name: Test Steps

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
        description: "Platform (macos/windows)"
      venv_path:
        required: true
        type: string
        description: "Path to virtual environment"
      use_cache:
        required: false
        type: boolean
        default: false
        description: "Whether to use caching for packages"
      install_deps:
        required: false
        type: boolean
        default: false
        description: "Whether to install minimal dependencies"
      setup_python:
        required: false
        type: boolean
        default: false
        description: "Whether to use the setup file for virtual environment"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.job }}-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  run-tests:
    runs-on: ${{ inputs.platform }}-latest
    steps:
      - name: Debug environment
        shell: bash
        run: |
          echo "=== Environment Debug Info ==="
          echo "Platform: ${{ inputs.platform }}"
          echo "venv_path: ${{ inputs.venv_path }}"
          echo "use_cache: ${{ inputs.use_cache }}"
          echo "install_deps: ${{ inputs.install_deps }}"
          echo "setup_python: ${{ inputs.setup_python }}"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "==========================="

      - name: Debug Windows environment
        if: inputs.platform == 'windows'
        shell: pwsh
        run: |
          Write-Output "=== Windows Environment Debug Info ==="
          Write-Output "Current directory: $(Get-Location)"
          Write-Output "Directory contents:"
          Get-ChildItem
          Write-Output "Environment variables:"
          Get-ChildItem env: | Format-Table -AutoSize
          Write-Output "PATH: $env:Path"
          Write-Output "Python version: $(python --version)"
          Write-Output "================================"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Log Python venv cache info
        shell: bash
        run: |
          echo "=== Python venv Cache Info ==="
          echo "Cache path: ${{ runner.tool_cache }}/venv"
          echo "Cache key: ${{ runner.os }}-${{ runner.arch }}-venv-${{ hashFiles('infra/packages/pip.sh', 'infra/packages/pip.ps1') }}"
          echo "Cache size: $(du -sh ${{ runner.tool_cache }}/venv 2>/dev/null || echo 'Not found')"
          echo "==========================="

      - name: Restore Python venv from cache
        uses: actions/cache@v4
        id: python-venv-cache
        with:
          path: ${{ runner.tool_cache }}/venv
          key: ${{ runner.os }}-${{ runner.arch }}-venv-${{ hashFiles('infra/packages/pip.sh', 'infra/packages/pip.ps1') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-venv-

      - name: Log Python venv cache result
        shell: bash
        run: |
          echo "=== Python venv Cache Result ==="
          echo "Cache hit: ${{ steps.python-venv-cache.outputs.cache-hit }}"
          echo "Cache size after restore: $(du -sh ${{ runner.tool_cache }}/venv 2>/dev/null || echo 'Not found')"
          echo "=============================="

      - name: Activate virtual environment (Windows)
        if: inputs.platform == 'windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $VENV_PATH = "${{ inputs.venv_path }}"

          # Debug information
          Write-Output "=== Virtual Environment Activation (Windows) ==="
          Write-Output "VENV_PATH: $VENV_PATH"
          Write-Output "Current directory: $(Get-Location)"
          Write-Output "Directory contents:"
          Get-ChildItem

          # Verify activation
          Write-Output "Python executable: $(Get-Command python -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source)"
          Write-Output "Python version: $(python --version 2>&1)"
          Write-Output "pip version: $(pip --version 2>&1)"
          Write-Output "================================"

      - name: Activate virtual environment (Unix)
        if: inputs.platform == 'macos'
        shell: bash
        run: |
          set -e
          VENV_PATH="${{ inputs.venv_path }}"

          # Debug information
          echo "=== Virtual Environment Activation (Unix) ==="
          echo "VENV_PATH: $VENV_PATH"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la

          # Check if virtual environment exists
          if [ ! -d "$VENV_PATH" ]; then
            echo "Error: Virtual environment not found at: $VENV_PATH"
            exit 1
          fi

          # Activate virtual environment
          source "$VENV_PATH/bin/activate"
          if [ $? -ne 0 ]; then
            echo "Error: Failed to activate virtual environment"
            exit 1
          fi

          # Verify activation
          echo "Python version: $(python --version)"
          echo "pip version: $(pip --version)"
          echo "================================"

      - name: Install minimal dependencies
        if: inputs.install_deps
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/pip.sh
          ./infra/packages/pip.sh || {
            echo "Failed to install minimal dependencies. Retrying..."
            pip cache purge
            ./infra/packages/pip.sh
          }

      - name: Verify Neovim installation (Unix)
        if: inputs.platform == 'macos'
        shell: bash
        run: |
          set -e
          echo "=== Verifying Neovim Installation ==="
          if ! command -v nvim &> /dev/null; then
            echo "Neovim not found. Installing..."
            brew install neovim tree-sitter
          fi
          echo "Neovim version:"
          nvim --version
          echo "================================"

      - name: Verify Neovim installation (Windows)
        if: inputs.platform == 'windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Output "=== Verifying Neovim Installation ==="
          if (-not (Get-Command nvim -ErrorAction SilentlyContinue)) {
              Write-Output "Neovim not found. Installing..."
              choco install neovim -y
              # Update PATH for current session
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          }
          Write-Output "Neovim version:"
          nvim --version
          Write-Output "================================"

      - name: Run Neovim sanity tests (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          VENV_DIR: ${{ inputs.venv_path }}
        run: |
          $venvPath = $env:VENV_DIR
          Write-Host "Using activation script: $venvPath\Scripts\Activate.ps1"
          bash infra/nvim_sanity_test.ps1

      - name: Run Neovim sanity tests (Unix)
        if: runner.os != 'Windows'
        shell: bash
        env:
          VENV_DIR: ${{ inputs.venv_path }}
        run: infra/nvim_sanity_test.sh

      - name: Install Python packages (Windows)
        if: inputs.setup_python && inputs.platform == 'windows'
        shell: pwsh
        run: |
          & "infra/packages/pip.ps1"

      - name: Install Python packages (Unix)
        if: inputs.setup_python && inputs.platform != 'windows'
        shell: bash
        run: |
          bash infra/packages/pip.sh

      - name: Cache Homebrew
        if: inputs.platform == 'macos'
        shell: bash
        run: |
          echo "=== Caching Homebrew ==="
          brew bundle dump
          echo "Homebrew cache saved to: $(brew bundle dump)"
          echo "==========================="
