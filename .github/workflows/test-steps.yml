name: Test Steps

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
        description: "Platform (macos/windows)"
      venv_path:
        required: true
        type: string
        description: "Path to virtual environment"
      use_cache:
        required: false
        type: boolean
        default: false
        description: "Whether to use caching for packages"
      install_deps:
        required: false
        type: boolean
        default: false
        description: "Whether to install minimal dependencies"
      setup_python:
        required: false
        type: boolean
        default: false
        description: "Whether to use the setup file for virtual environment"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.job }}-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  cache:
    if: inputs.use_cache
    uses: ./.github/workflows/cache-config.yml
    with:
      platform: ${{ inputs.platform }}
      setup_python: ${{ inputs.setup_python }}
      setup_node: true

  run-tests:
    needs: cache
    runs-on: ${{ inputs.platform }}-latest
    steps:
      - name: Debug environment
        shell: bash
        run: |
          echo "=== Environment Debug Info ==="
          echo "Platform: ${{ inputs.platform }}"
          echo "venv_path: ${{ inputs.venv_path }}"
          echo "use_cache: ${{ inputs.use_cache }}"
          echo "install_deps: ${{ inputs.install_deps }}"
          echo "setup_python: ${{ inputs.setup_python }}"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "==========================="

      - name: Debug Windows environment
        if: inputs.platform == 'windows'
        shell: pwsh
        run: |
          Write-Output "=== Windows Environment Debug Info ==="
          Write-Output "Current directory: $(Get-Location)"
          Write-Output "Directory contents:"
          Get-ChildItem
          Write-Output "Environment variables:"
          Get-ChildItem env: | Format-Table -AutoSize
          Write-Output "PATH: $env:Path"
          Write-Output "Python version: $(python --version)"
          Write-Output "================================"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Log Python venv cache info
        shell: bash
        run: |
          echo "=== Python venv Cache Info ==="
          echo "Cache path: ${{ inputs.venv_path }}"
          echo "Cache key: ${{ runner.os }}-${{ runner.arch }}-venv-${{ hashFiles('infra/packages/pip.sh', 'infra/packages/pip.ps1') }}"
          echo "Cache size: $(du -sh ${{ inputs.venv_path }} 2>/dev/null || echo 'Not found')"
          echo "Cache hit: ${{ needs.cache.outputs.python_cache_hit }}"
          echo "==========================="

      - name: Activate virtual environment
        shell: bash
        run: |
          # Verify virtual environment exists
          if [ ! -d "${{ inputs.venv_path }}" ]; then
            echo "Error: Virtual environment directory not found at ${{ inputs.venv_path }}"
            echo "Creating virtual environment..."
            python3 -m venv "${{ inputs.venv_path }}"
            if [ $? -ne 0 ]; then
              echo "Error: Failed to create virtual environment"
              exit 1
            fi
          fi

          # Activate virtual environment based on platform
          if [ "${{ inputs.platform }}" == "windows" ]; then
            if [ ! -f "${{ inputs.venv_path }}/Scripts/activate" ]; then
              echo "Error: Windows activation script not found"
              exit 1
            fi
            source "${{ inputs.venv_path }}/Scripts/activate"
          else
            if [ ! -f "${{ inputs.venv_path }}/bin/activate" ]; then
              echo "Error: Unix activation script not found"
              exit 1
            fi
            source "${{ inputs.venv_path }}/bin/activate"
          fi

          # Verify activation
          if ! command -v python &> /dev/null; then
            echo "Error: Python not found in PATH after activation"
            exit 1
          fi

          echo "Python version: $(python --version)"
          echo "Python path: $(which python)"
          echo "Virtual environment: $VIRTUAL_ENV"

      - name: Install dependencies
        if: inputs.install_deps
        shell: bash
        run: |
          if [ "${{ inputs.platform }}" == "windows" ]; then
            source "${{ inputs.venv_path }}/Scripts/activate"
          else
            source "${{ inputs.venv_path }}/bin/activate"
          fi
          pip install -r requirements.txt

      - name: Run tests
        shell: bash
        run: |
          if [ "${{ inputs.platform }}" == "windows" ]; then
            source "${{ inputs.venv_path }}/Scripts/activate"
          else
            source "${{ inputs.venv_path }}/bin/activate"
          fi
          python -m pytest tests/
