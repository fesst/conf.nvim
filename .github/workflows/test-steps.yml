name: Test Steps

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
        description: "Platform (macos/windows)"
      venv_path:
        required: true
        type: string
        description: "Path to virtual environment"
      use_cache:
        required: false
        type: boolean
        default: false
        description: "Whether to use caching for packages"
      install_deps:
        required: false
        type: boolean
        default: false
        description: "Whether to install minimal dependencies"
      setup_python:
        required: false
        type: boolean
        default: false
        description: "Whether to use the setup file for virtual environment"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.job }}-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  cache:
    if: inputs.use_cache
    uses: ./.github/workflows/cache-config.yml
    with:
      platform: ${{ inputs.platform }}
      setup_python: ${{ inputs.setup_python }}
      setup_node: true

  run-tests:
    needs: cache
    runs-on: ${{ inputs.platform }}-latest
    steps:
      - name: Debug environment
        shell: bash
        run: |
          echo "=== Environment Debug Info ==="
          echo "Platform: ${{ inputs.platform }}"
          echo "venv_path: ${{ inputs.venv_path }}"
          echo "use_cache: ${{ inputs.use_cache }}"
          echo "install_deps: ${{ inputs.install_deps }}"
          echo "setup_python: ${{ inputs.setup_python }}"
          echo "Cache hit: ${{ needs.cache.outputs.python_cache_hit }}"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "==========================="

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        if: inputs.setup_python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install Python packages
        if: inputs.setup_python
        shell: bash
        run: |
          set -eo pipefail
          if [ "${{ inputs.platform }}" == "windows" ]; then
            chmod +x infra/packages/pip.ps1
            ./infra/packages/pip.ps1
          else
            chmod +x infra/packages/pip.sh
            ./infra/packages/pip.sh
          fi

      - name: Cache Homebrew
        if: inputs.platform == 'macos'
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
          key: ${{ runner.os }}-homebrew-${{ hashFiles('**/Brewfile') }}
          restore-keys: |
            ${{ runner.os }}-homebrew-

      - name: Install Neovim (macOS)
        if: inputs.platform == 'macos'
        run: |
          brew update
          brew install neovim

      - name: Set up virtual environment
        if: inputs.setup_python
        shell: bash
        run: |
          set -eo pipefail
          VENV_PATH="${{ inputs.venv_path }}"
          PYTHONPATH="${PYTHONPATH:-}"

          echo "=== Virtual Environment Setup ==="
          echo "VENV_PATH: $VENV_PATH"
          echo "Cache hit: ${{ needs.cache.outputs.python_cache_hit }}"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "=============================="

          # Create virtual environment if it doesn't exist
          if [ ! -d "$VENV_PATH" ]; then
            echo "Creating new virtual environment..."
            python -m venv "$VENV_PATH"
          fi

          # Activate virtual environment based on platform
          if [ "${{ inputs.platform }}" == "windows" ]; then
            if [ ! -f "$VENV_PATH/Scripts/activate" ]; then
              echo "Error: Windows activation script not found"
              exit 1
            fi
            source "$VENV_PATH/Scripts/activate"
          else
            if [ ! -f "$VENV_PATH/bin/activate" ]; then
              echo "Error: Unix activation script not found"
              exit 1
            fi
            source "$VENV_PATH/bin/activate"
          fi

          # Verify activation
          if ! command -v python &> /dev/null; then
            echo "Error: Python not found in PATH after activation"
            exit 1
          fi

          echo "Python version: $(python --version)"
          echo "Python path: $(which python)"
          echo "Virtual environment: $VIRTUAL_ENV"

          # Set environment variables
          echo "VIRTUAL_ENV=$VENV_PATH" >> $GITHUB_ENV
          echo "PYTHONPATH=$VENV_PATH/lib/python3.13/site-packages:$PYTHONPATH" >> $GITHUB_ENV

      - name: Install dependencies
        if: inputs.install_deps
        shell: bash
        run: |
          set -eo pipefail
          PYTHONPATH="${PYTHONPATH:-}"
          if [ "${{ inputs.setup_python }}" == "true" ]; then
            if [ "${{ inputs.platform }}" == "windows" ]; then
              source "${{ inputs.venv_path }}/Scripts/activate"
            else
              source "${{ inputs.venv_path }}/bin/activate"
            fi
          fi
          pip install pynvim black flake8 isort pytest --no-cache-dir

      - name: Restore Python venv from cache
        uses: actions/cache@v4
        id: python-venv-cache
        with:
          path: ${{ runner.tool_cache }}/venv
          key: ${{ runner.os }}-${{ runner.arch }}-venv-${{ hashFiles('infra/packages/pip.sh', 'infra/packages/pip.ps1') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-venv-

      - name: Create Python virtual environment if not cached
        if: steps.python-venv-cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $venvPath = "${{ runner.tool_cache }}/venv"
          python -m venv $venvPath
          & "$venvPath/Scripts/Activate.ps1"
          python -m pip install --upgrade pip
          pip install pynvim black flake8 isort pytest pytest-cov --no-cache-dir

      - name: Cache Chocolatey packages
        if: inputs.platform == 'windows'
        uses: actions/cache@v4
        id: choco-cache
        with:
          path: C:\ProgramData\chocolatey\lib
          key: ${{ runner.os }}-choco-${{ hashFiles('infra/packages/choco.ps1') }}
          restore-keys: |
            ${{ runner.os }}-choco-

      - name: Install Neovim (Windows)
        if: inputs.platform == 'windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "=== Neovim Installation Debug ==="
          Write-Host "Chocolatey cache hit: ${{ steps.choco-cache.outputs.cache-hit }}"
          Write-Host "Current PATH: $env:Path"

          # Check if Neovim is installed
          $nvimPath = Get-Command nvim -ErrorAction SilentlyContinue
          if ($nvimPath) {
            Write-Host "Neovim found at: $($nvimPath.Source)"
          } else {
            Write-Host "Neovim not found, installing..."
            choco install neovim -y --no-progress
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to install Neovim"
              exit 1
            }

            # Refresh environment variables
            $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

            # Add Chocolatey's bin directory to PATH if not present
            $chocoBinPath = "C:\ProgramData\chocolatey\bin"
            if ($env:Path -notlike "*$chocoBinPath*") {
              $env:Path = "$chocoBinPath;$env:Path"
            }

            Write-Host "Updated PATH: $env:Path"

            # Verify installation
            $nvimPath = Get-Command nvim -ErrorAction SilentlyContinue
            if (-not $nvimPath) {
              Write-Error "Neovim still not found after installation"
              exit 1
            }
            Write-Host "Neovim installed at: $($nvimPath.Source)"
          }
          Write-Host "=============================="

      - name: Run tests (Windows)
        if: inputs.platform == 'windows'
        shell: pwsh
        env:
          VENV_DIR: ${{ inputs.venv_path }}
          VIRTUAL_ENV: ${{ inputs.venv_path }}
          PYTHONPATH: ${{ inputs.venv_path }}\Lib\site-packages:${{ env.PYTHONPATH }}
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Test-Path "infra/nvim_sanity_test.ps1")) {
              Write-Error "Test script not found at infra/nvim_sanity_test.ps1"
              exit 1
          }
          & "infra/nvim_sanity_test.ps1"

      - name: Run Neovim sanity tests
        shell: bash
        env:
          VENV_DIR: ${{ inputs.venv_path }}
          VIRTUAL_ENV: ${{ inputs.venv_path }}
          PYTHONPATH: ${{ inputs.venv_path }}/lib/python3.13/site-packages:${{ env.PYTHONPATH }}
        run: infra/nvim_sanity_test.sh
