name: Setup macOS Environment

on:
  workflow_call:
    inputs:
      setup_python:
        required: true
        type: boolean
        default: true
      setup_rust:
        required: true
        type: boolean
        default: true
      setup_node:
        required: true
        type: boolean
        default: true
      setup_lua:
        required: true
        type: boolean
        default: true
    outputs:
      virtual_env:
        description: "Path to virtual environment"
        value: ${{ jobs.setup-environment.outputs.virtual_env }}

jobs:
  setup-environment:
    name: Setup Environment
    runs-on: macos-latest
    outputs:
      virtual_env: ${{ steps.venv-mac.outputs.virtual_env }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        if: inputs.setup_node
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.0"
          cache: false # Disable automatic cache since we don't have lock files

      - name: Cache Homebrew packages
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
            /opt/homebrew
            ~/Library/Logs/Homebrew
            /opt/homebrew/Library/Caches
            /opt/homebrew/Library/Logs
          key: ${{ runner.os }}-homebrew-${{ hashFiles('infra/packages/brew.sh') }}-${{ runner.arch }}
          restore-keys: |
            ${{ runner.os }}-homebrew-${{ runner.arch }}-
            ${{ runner.os }}-homebrew-

      - name: Cache npm packages
        if: inputs.setup_node
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ runner.arch }}-npm-${{ hashFiles('infra/packages/npm.sh') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-npm-
            ${{ runner.os }}-${{ runner.arch }}-

      - name: Set up Python
        if: inputs.setup_python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"
          cache-dependency-path: |
            **/requirements.txt
            **/requirements/*.txt
            !**/node_modules/**/requirements.txt
            !**/node_modules/**/requirements/*.txt

      - name: Set up Python virtual environment
        if: inputs.setup_python
        id: venv-mac
        shell: bash
        run: |
          echo "Creating Python virtual environment..."
          python3 -m venv "${{ runner.tool_cache }}/venv"
          echo "virtual_env=${{ runner.tool_cache }}/venv" >> $GITHUB_OUTPUT

          echo "Activating virtual environment..."
          source "${{ runner.tool_cache }}/venv/bin/activate"

          echo "Upgrading pip..."
          python -m pip install --upgrade pip

          echo "Installing dependencies..."
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi

          echo "Verifying installation..."
          python --version
          pip list

      - name: Set up Rust
        if: inputs.setup_rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        if: inputs.setup_rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ runner.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-cargo-

      - name: Set up Lua
        if: inputs.setup_lua
        shell: bash
        run: |
          echo "Installing Lua..."
          brew install lua luarocks

          echo "Verifying Lua installation..."
          lua -v
          luarocks --version

      - name: Cache LuaRocks packages
        if: inputs.setup_lua
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/luarocks
            ~/.luarocks
            ~/.local/share/luarocks
          key: ${{ runner.os }}-${{ runner.arch }}-luarocks-${{ hashFiles('infra/packages/luarocks.sh') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-luarocks-

      - name: Install system packages
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/brew.sh
          ./infra/packages/brew.sh || {
            echo "Failed to install system packages. Retrying..."
            brew update
            ./infra/packages/brew.sh
          }

      - name: Install Node.js packages
        if: inputs.setup_node
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/npm.sh
          ./infra/packages/npm.sh || {
            echo "Failed to install Node.js packages. Retrying..."
            npm cache clean --force
            ./infra/packages/npm.sh
          }

      - name: Install Rust packages
        if: inputs.setup_rust
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/cargo.sh
          ./infra/packages/cargo.sh || {
            echo "Failed to install Rust packages. Retrying..."
            cargo clean
            ./infra/packages/cargo.sh
          }

      - name: Install Python packages
        if: inputs.setup_python
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/pip.sh
          source "$GITHUB_WORKSPACE/.venv/bin/activate"
          ./infra/packages/pip.sh || {
            echo "Failed to install Python packages. Retrying..."
            pip cache purge
            ./infra/packages/pip.sh
          }

      - name: Install Lua packages
        if: inputs.setup_lua
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/luarocks.sh
          ./infra/packages/luarocks.sh || {
            echo "Failed to install Lua packages. Retrying..."
            luarocks config --local lua_version 5.4
            ./infra/packages/luarocks.sh
          }

      - name: Install Neovim configuration
        shell: bash
        run: |
          set -e
          chmod +x infra/packages/nvim.sh
          ./infra/packages/nvim.sh || {
            echo "Failed to install Neovim configuration. Retrying..."
            rm -rf ~/.local/share/nvim
            ./infra/packages/nvim.sh
          }
