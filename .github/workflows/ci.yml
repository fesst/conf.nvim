name: "Master CI"

on:
  push:
    branches: ["master"]
  schedule:
    - cron: "33 12 * * 1"

# Set default permissions for all jobs
permissions:
  contents: read
  packages: read
  security-events: write

jobs:
  test:
    name: Test
    runs-on: macos-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1

      - name: Set up cache directories
        run: |
          mkdir -p "$HOME/.cache/pip"
          mkdir -p "$HOME/.npm"
          mkdir -p "$HOME/Library/Caches/Homebrew"

      - name: Cache Homebrew packages
        uses: actions/cache@v4
        with:
          path: |
            $HOME/Library/Caches/Homebrew
            /usr/local/Homebrew
          key: ${{ runner.os }}-homebrew-${{ hashFiles('infra/packages/brew.sh', 'infra/install.sh') }}
          restore-keys: |
            ${{ runner.os }}-homebrew-

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: $HOME/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('infra/packages/pip.sh', 'infra/install.sh') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache npm packages
        uses: actions/cache@v4
        with:
          path: $HOME/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('infra/packages/npm.sh', 'infra/install.sh') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Neovim
        run: brew install neovim
        shell: bash

      - name: Set up Python virtual environment
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          python3 -m pip install --upgrade pip
          python3 -m pip install pynvim black flake8 isort
        shell: bash

      - name: Install dependencies
        run: |
          if [ -f infra/install.sh ]; then
            chmod +x infra/install.sh
            source .venv/bin/activate
            export PATH="$VIRTUAL_ENV/bin:$PATH"
            export PYTHONPATH="$VIRTUAL_ENV/lib/python3.*/site-packages:$PYTHONPATH"
            CI=true ./infra/install.sh
          fi
        shell: bash

      - name: Run sanity tests
        run: |
          chmod +x infra/nvim_sanity_test.sh
          source .venv/bin/activate
          ./infra/nvim_sanity_test.sh
        env:
          CI: true
          NVIM_LOG_FILE: infra/nvim.log
        continue-on-error: false
        shell: bash

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            infra/nvim.log
            infra/test_files/checkhealth.log
          if-no-files-found: warn

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: actions
          config-file: ./.github/codeql/codeql-config.yml

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:actions"

  lua-analysis:
    name: Lua Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Lua and LuaRocks
        run: |
          sudo apt-get update
          sudo apt-get install -y lua5.4 luarocks
        shell: bash

      - name: Install luacheck
        run: |
          sudo luarocks install luacheck
        shell: bash

      - name: Run luacheck
        run: |
          luacheck lua/ after/plugin/ --codes --ranges --formatter plain
        shell: bash
