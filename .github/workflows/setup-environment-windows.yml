name: Setup Windows Environment

on:
  workflow_call:
    inputs:
      setup_python:
        required: true
        type: boolean
        default: true
      setup_rust:
        required: true
        type: boolean
        default: true
      setup_node:
        required: true
        type: boolean
        default: true
      setup_lua:
        required: true
        type: boolean
        default: true
    outputs:
      virtual_env:
        description: "Path to virtual environment"
        value: ${{ jobs.setup-environment.outputs.virtual_env }}

jobs:
  setup-environment:
    name: Setup Environment
    runs-on: windows-latest
    outputs:
      virtual_env: ${{ steps.venv-win.outputs.virtual_env }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Chocolatey packages
        uses: actions/cache@v4
        with:
          path: |
            C:\ProgramData\chocolatey\lib
            C:\ProgramData\chocolatey\bin
            C:\tools
            C:\Users\runneradmin\AppData\Local\Temp\chocolatey
            C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools
            C:\Program Files (x86)\Microsoft Visual Studio\2019\Community
            C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
            C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional
            C:\ProgramData\Microsoft\VisualStudio\Packages
            C:\ProgramData\Microsoft\VisualStudio\Setup
            C:\ProgramData\Microsoft\VisualStudio\Packages_vs_bootstrapper_d15
          key: ${{ runner.os }}-${{ runner.arch }}-choco-${{ hashFiles('infra/packages/*.ps1', 'infra/packages/*.sh') }}-vs2019-${{ hashFiles('infra/packages/vs-setup.ps1') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-choco-${{ hashFiles('infra/packages/*.ps1', 'infra/packages/*.sh') }}-vs2019-
            ${{ runner.os }}-${{ runner.arch }}-choco-

      - name: Set up Node.js
        if: inputs.setup_node
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.0"

      - name: Cache npm packages
        if: inputs.setup_node
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ runner.arch }}

      - name: Set up Python
        if: inputs.setup_python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache Visual Studio Build Tools
        uses: actions/cache@v4
        id: vs-cache
        with:
          path: |
            C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools
            C:\ProgramData\Microsoft\VisualStudio\Packages
            C:\ProgramData\Microsoft\VisualStudio\Setup
            C:\ProgramData\Microsoft\VisualStudio\Packages_vs_bootstrapper_d15
            C:\Users\runneradmin\AppData\Local\Temp\chocolatey\visualstudio2019buildtools
          key: ${{ runner.os }}-vs2019-buildtools-16.11.47
          restore-keys: |
            ${{ runner.os }}-vs2019-buildtools-

      - name: Install Visual Studio Build Tools
        if: steps.vs-cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Output "Starting Visual Studio Build Tools installation process..."

          # Download the specific version of VS Build Tools
          $vsInstallerUrl = "https://aka.ms/vs/16/release/vs_buildtools.exe"
          $vsInstallerPath = "$env:TEMP\vs_buildtools.exe"

          Write-Output "Downloading VS Build Tools installer from $vsInstallerUrl..."
          Invoke-WebRequest -Uri $vsInstallerUrl -OutFile $vsInstallerPath

          # Install VS Build Tools with specific components
          Write-Output "Running VS Build Tools installer with required components..."
          Start-Process -FilePath $vsInstallerPath -ArgumentList "--quiet", "--wait", "--norestart", "--nocache", `
            "--installPath", "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools", `
            "--add", "Microsoft.VisualStudio.Workload.VCTools", `
            "--includeRecommended" -NoNewWindow -Wait

          if ($LASTEXITCODE -ne 0) {
            throw "Failed to install Visual Studio Build Tools"
          }

          Write-Output "Visual Studio Build Tools installation completed successfully"

      - name: Install system packages
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Output "Installing system packages using Chocolatey..."

          # Ensure Chocolatey is installed
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Write-Output "Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }

          # Function to check if a package is installed
          function Test-ChocolateyPackage {
            param($PackageName)
            $package = choco list --local-only --exact $PackageName
            return $package -match "^$PackageName\s"
          }

          # Install required packages only if not already installed
          $packages = @(
            @{Name = "neovim"; Installed = $false}
            @{Name = "tree-sitter"; Installed = $false}
          )

          foreach ($package in $packages) {
            if (-not (Test-ChocolateyPackage $package.Name)) {
              Write-Output "Installing $($package.Name)..."
              choco install $package.Name -y
              if ($LASTEXITCODE -ne 0) {
                throw "Failed to install $($package.Name)"
              }
            } else {
              Write-Output "$($package.Name) is already installed"
            }
          }

          # Install LuaRocks if not already installed
          if (-not (Test-ChocolateyPackage "luarocks")) {
            Write-Output "Installing LuaRocks..."
            choco install luarocks -y
            if ($LASTEXITCODE -ne 0) {
              throw "Failed to install LuaRocks"
            }
          } else {
            Write-Output "LuaRocks is already installed"
          }

          # Add Neovim to PATH
          $nvimPath = "C:\tools\neovim\nvim-win64\bin"
          if (-not $env:Path.Contains($nvimPath)) {
            $env:Path = "$nvimPath;$env:Path"
          }

          # Set up Visual Studio environment
          & "${{ github.workspace }}/infra/packages/vs-setup.ps1"

          # Refresh environment variables
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path", "User")

          # Verify installations
          Write-Output "Verifying installations..."
          Write-Output "Current PATH: $env:Path"

          # Verify Neovim
          if (-not (Get-Command nvim -ErrorAction SilentlyContinue)) {
            throw "Neovim not found in PATH after installation"
          }
          nvim --version

          # Verify Tree-sitter
          if (-not (Get-Command tree-sitter -ErrorAction SilentlyContinue)) {
            throw "Tree-sitter not found in PATH after installation"
          }
          tree-sitter --version

          # Verify LuaRocks
          if (-not (Get-Command luarocks -ErrorAction SilentlyContinue)) {
            throw "LuaRocks not found in PATH after installation"
          }
          luarocks --version

      - name: Cache virtual environment
        if: inputs.setup_python
        uses: actions/cache@v4
        with:
          path: ${{ runner.tool_cache }}/venv
          key: ${{ runner.os }}-${{ runner.arch }}-venv-${{ hashFiles('infra/packages/pip.sh', 'infra/packages/pip.ps1') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-venv-

      - name: Set up Python virtual environment
        if: inputs.setup_python
        id: venv-win
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $VENV_PATH = "${{ runner.tool_cache }}/venv"
          Write-Output "Setting up virtual environment at: $VENV_PATH"

          # Remove existing virtual environment if it exists
          if (Test-Path $VENV_PATH) {
            Write-Output "Removing existing virtual environment..."
            Remove-Item -Recurse -Force $VENV_PATH
            # Wait for filesystem to sync
            Start-Sleep -Seconds 2
            if (Test-Path $VENV_PATH) {
              throw "Failed to remove existing virtual environment"
            }
          }

          # Create virtual environment
          Write-Output "Creating virtual environment..."
          python -m venv $VENV_PATH
          if ($LASTEXITCODE -ne 0) {
            throw "Failed to create virtual environment"
          }

          # Verify virtual environment was created
          if (-not (Test-Path $VENV_PATH)) {
            throw "Virtual environment directory not found after creation"
          }

          # Verify activation script exists
          $activateScript = Join-Path $VENV_PATH "Scripts\activate.ps1"
          if (-not (Test-Path $activateScript)) {
            throw "Activation script not found at: $activateScript"
          }

          # Set output variable
          "virtual_env=$VENV_PATH" >> $env:GITHUB_OUTPUT

          # Activate virtual environment
          Write-Output "Activating virtual environment..."
          & $activateScript
          if ($LASTEXITCODE -ne 0) {
            throw "Failed to activate virtual environment"
          }

          # Upgrade pip
          Write-Output "Upgrading pip..."
          python -m pip install --upgrade pip
          if ($LASTEXITCODE -ne 0) {
            throw "Failed to upgrade pip"
          }

          # Verify installation
          Write-Output "Verifying Python installation..."
          python --version
          pip list

          # Verify output variable was set
          Write-Output "Virtual environment path: $VENV_PATH"
          Write-Output "Output variable set: $env:GITHUB_OUTPUT"

      - name: Install system packages
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          # Skip brew installation on Windows
          Write-Output "Skipping brew installation on Windows"

      - name: Install Node.js packages
        if: inputs.setup_node
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          & "${{ github.workspace }}/infra/packages/npm.ps1"

      - name: Cache Cargo packages
        if: inputs.setup_rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ runner.arch }}-cargo-${{ hashFiles('**/Cargo.lock', 'infra/packages/cargo.ps1') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-cargo-

      - name: Install Rust packages
        if: inputs.setup_rust
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          & "${{ github.workspace }}/infra/packages/cargo.ps1"

      - name: Install Python packages
        if: inputs.setup_python
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          & (Join-Path ${{ steps.venv-win.outputs.virtual_env }} "Scripts\activate.ps1")
          & "${{ github.workspace }}/infra/packages/pip.ps1"

      - name: Install LuaRocks packages
        if: inputs.setup_lua
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          & "${{ github.workspace }}/infra/packages/luarocks.ps1"

      - name: Install Neovim configuration
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Output "Installing Neovim configuration..."

          # Ensure Neovim is in PATH
          $nvimPath = "C:\tools\neovim\nvim-win64\bin"
          if (-not $env:Path.Contains($nvimPath)) {
            $env:Path = "${nvimPath};${env:Path}"
          }

          # Refresh environment variables
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

          # Verify Neovim is in PATH
          if (-not (Get-Command nvim -ErrorAction SilentlyContinue)) {
            throw "Neovim not found in PATH. Current PATH: ${env:Path}"
          }

          # Create Neovim directories if they don't exist
          $nvimDirs = @(
            "${env:USERPROFILE}\.config\nvim",
            "${env:USERPROFILE}\.local\share\nvim",
            "${env:USERPROFILE}\.cache\nvim"
          )

          foreach ($dir in $nvimDirs) {
            if (-not (Test-Path $dir)) {
              New-Item -ItemType Directory -Path $dir -Force | Out-Null
            }
          }

          # Copy configuration files
          Copy-Item -Path "${env:GITHUB_WORKSPACE}\*" -Destination "${env:USERPROFILE}\.config\nvim" -Recurse -Force

          # Verify installation
          if (-not (Test-Path "${env:USERPROFILE}\.config\nvim\init.lua")) {
            throw "Failed to copy Neovim configuration files"
          }

          Write-Output "Neovim configuration installed successfully"

      - name: Full environment setup
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          & "${{ github.workspace }}/infra/ci-setup-windows.ps1"
