name: Setup Windows Environment

on:
  workflow_call:
    inputs:
      setup_python:
        required: true
        type: boolean
        default: true
      setup_rust:
        required: true
        type: boolean
        default: true
      setup_node:
        required: true
        type: boolean
        default: true
      setup_lua:
        required: true
        type: boolean
        default: true
    outputs:
      virtual_env:
        description: "Path to virtual environment"
        value: ${{ jobs.setup-environment.outputs.virtual_env }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup-environment:
    name: Setup Environment
    runs-on: windows-latest
    outputs:
      virtual_env: ${{ steps.venv-win.outputs.virtual_env }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        if: inputs.setup_python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache virtual environment
        if: inputs.setup_python
        uses: actions/cache@v4
        id: venv-cache
        with:
          path: ${{ runner.tool_cache }}/venv
          key: ${{ runner.os }}-${{ runner.arch }}-venv-${{ hashFiles('infra/packages/pip.sh', 'infra/packages/pip.ps1') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-venv-

      - name: Cache Chocolatey packages
        if: inputs.platform == 'windows'
        uses: actions/cache@v4
        id: choco-cache
        with:
          path: C:\ProgramData\chocolatey\lib
          key: ${{ runner.os }}-${{ runner.arch }}-choco-${{ hashFiles('infra/packages/choco.ps1') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-choco-

      - name: Cache npm packages
        if: inputs.setup_node
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            ~/.npm
            ${{ runner.os == 'Windows' && format('{0}\\AppData\\Roaming\\npm-cache', env.USERPROFILE) || '~/.npm' }}
          key: ${{ runner.os }}-${{ runner.arch }}-npm-${{ hashFiles('infra/packages/npm.sh', 'infra/packages/npm.ps1') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-npm-

      - name: Cache Rust packages
        if: inputs.setup_rust
        uses: actions/cache@v4
        id: rust-cache
        with:
          path: |
            ${{ runner.os == 'Windows' && format('{0}\\.cargo', env.USERPROFILE) || '~/.cargo' }}
            ${{ runner.os == 'Windows' && format('{0}\\.rustup', env.USERPROFILE) || '~/.rustup' }}
          key: ${{ runner.os }}-${{ runner.arch }}-rust-${{ hashFiles('infra/packages/cargo.sh', 'infra/packages/cargo.ps1') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-rust-

      - name: Cache Visual Studio Build Tools
        if: inputs.platform == 'windows'
        uses: actions/cache@v4
        id: vstools-cache
        with:
          path: ${{ runner.os == 'Windows' && format('{0}\\vs_buildtools', env.USERPROFILE) || '~/vs_buildtools' }}
          key: ${{ runner.os }}-${{ runner.arch }}-vstools-${{ hashFiles('infra/packages/vs-setup.ps1') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-vstools-

      - name: Set up Python virtual environment
        if: inputs.setup_python
        id: venv-win
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          # Use runner.tool_cache for consistent path
          $venvPath = Join-Path $env:RUNNER_TOOL_CACHE "venv"
          Write-Output "Setting up virtual environment at: $venvPath"

          # Create parent directory if it doesn't exist
          $parentDir = Split-Path -Parent $venvPath
          if (-not (Test-Path $parentDir)) {
              Write-Output "Creating parent directory: $parentDir"
              New-Item -ItemType Directory -Path $parentDir -Force | Out-Null
          }

          # Remove existing virtual environment if it exists
          if (Test-Path $venvPath) {
              Write-Output "Removing existing virtual environment..."
              Remove-Item -Path $venvPath -Recurse -Force
              Start-Sleep -Seconds 2  # Wait for filesystem to sync
          }

          # Create new virtual environment
          Write-Output "Creating new virtual environment..."
          python -m venv $venvPath
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to create virtual environment"
              Write-Output "Python version: $(python --version)"
              Write-Output "Python path: $(Get-Command python | Select-Object -ExpandProperty Source)"
              exit 1
          }

          # Verify virtual environment was created
          if (-not (Test-Path $venvPath)) {
              Write-Error "Virtual environment directory not found after creation"
              exit 1
          }

          # Set the output variable
          Write-Output "virtual_env=$venvPath" >> $env:GITHUB_OUTPUT
          Write-Output "Setting virtual_env output to: $venvPath"

          # Verify activation script exists
          $activateScript = Join-Path $venvPath "Scripts\Activate.ps1"
          if (-not (Test-Path $activateScript)) {
              Write-Error "Activation script not found at: $activateScript"
              exit 1
          }

          # Set execution policy for the process
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force

          # Test activation
          Write-Output "Testing virtual environment activation..."
          & $activateScript
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to activate virtual environment"
              exit 1
          }

          # Verify Python path is correct
          $pythonPath = (Get-Command python | Select-Object -ExpandProperty Source)
          if (-not $pythonPath.StartsWith($venvPath)) {
              Write-Error "Python is not using the virtual environment"
              Write-Output "Expected Python path to start with: $venvPath"
              Write-Output "Actual Python path: $pythonPath"
              exit 1
          }

      - name: Install system packages
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Output "Installing system packages..."
          choco install neovim -y
          choco install luarocks -y

      - name: Install Node.js packages
        if: inputs.setup_node
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Output "Installing Node.js packages..."
          npm install -g neovim

      - name: Install Rust
        if: inputs.setup_rust
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Output "Installing Rust..."
          Invoke-WebRequest -Uri https://win.rustup.rs -OutFile rustup-init.exe
          .\rustup-init.exe -y
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          rustup default stable
          cargo install stylua

      - name: Install Python packages
        if: inputs.setup_python
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Output "Installing Python packages..."
          & "infra/packages/pip.ps1"

      - name: Install Lua packages
        if: inputs.setup_lua
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Output "Installing Lua packages..."
          choco install lua -y
