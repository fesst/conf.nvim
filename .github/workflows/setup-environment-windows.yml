name: Setup Windows Environment

on:
  workflow_call:
    inputs:
      setup_python:
        required: true
        type: boolean
        default: true
      setup_rust:
        required: true
        type: boolean
        default: true
      setup_node:
        required: true
        type: boolean
        default: true
      setup_lua:
        required: true
        type: boolean
        default: true
    outputs:
      virtual_env:
        description: "Path to virtual environment"
        value: ${{ jobs.setup-environment.outputs.virtual_env }}

jobs:
  setup-environment:
    name: Setup Environment
    runs-on: windows-latest
    outputs:
      virtual_env: ${{ steps.venv-win.outputs.virtual_env }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        if: inputs.setup_node
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.0"

      - name: Cache npm packages
        if: inputs.setup_node
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ runner.arch }}

      - name: Set up Python
        if: inputs.setup_python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install core dependencies
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Output "Installing core dependencies..."
          choco install neovim tree-sitter -y

          # Add Neovim to PATH
          $nvimPath = "C:\Program Files\Neovim\bin"
          if (-not $env:Path.Contains($nvimPath)) {
              $env:Path = "$nvimPath;$env:Path"
          }

          # Refresh environment variables
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path", "User")

          Write-Output "Verifying installations..."
          Write-Output "Current PATH: $env:Path"
          nvim --version
          tree-sitter --version

      - name: Cache virtual environment
        if: inputs.setup_python
        uses: actions/cache@v4
        with:
          path: ${{ runner.tool_cache }}/venv
          key: ${{ runner.os }}-venv-${{ hashFiles('infra/packages/pip.sh') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Set up Python virtual environment
        if: inputs.setup_python
        id: venv-win
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $VENV_PATH = Join-Path $env:RUNNER_TOOL_CACHE "venv"
          Write-Output "Setting up virtual environment at: $VENV_PATH"

          # Remove existing virtual environment if it exists
          if (Test-Path $VENV_PATH) {
            Write-Output "Removing existing virtual environment..."
            Remove-Item -Recurse -Force $VENV_PATH
            # Wait for filesystem to sync
            Start-Sleep -Seconds 2
            if (Test-Path $VENV_PATH) {
              throw "Failed to remove existing virtual environment"
            }
          }

          # Create virtual environment
          Write-Output "Creating virtual environment..."
          python -m venv $VENV_PATH
          if ($LASTEXITCODE -ne 0) {
            throw "Failed to create virtual environment"
          }

          # Verify virtual environment was created
          if (-not (Test-Path $VENV_PATH)) {
            throw "Virtual environment directory not found after creation"
          }

          # Verify activation script exists
          $activateScript = Join-Path $VENV_PATH "Scripts\activate.ps1"
          if (-not (Test-Path $activateScript)) {
            throw "Activation script not found at: $activateScript"
          }

          # Set output variable
          "virtual_env=$VENV_PATH" >> $env:GITHUB_OUTPUT

          # Activate virtual environment
          Write-Output "Activating virtual environment..."
          & $activateScript
          if ($LASTEXITCODE -ne 0) {
            throw "Failed to activate virtual environment"
          }

          # Upgrade pip
          Write-Output "Upgrading pip..."
          python -m pip install --upgrade pip
          if ($LASTEXITCODE -ne 0) {
            throw "Failed to upgrade pip"
          }

          # Verify installation
          Write-Output "Verifying Python installation..."
          python --version
          pip list

          # Verify output variable was set
          Write-Output "Virtual environment path: $VENV_PATH"
          Write-Output "Output variable set: $env:GITHUB_OUTPUT"

      - name: Install system packages
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          chmod +x infra/packages/brew.sh
          ./infra/packages/brew.sh

      - name: Install Node.js packages
        if: inputs.setup_node
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          chmod +x infra/packages/npm.sh
          ./infra/packages/npm.sh

      - name: Install Rust packages
        if: inputs.setup_rust
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          chmod +x infra/packages/cargo.sh
          ./infra/packages/cargo.sh

      - name: Install Python packages
        if: inputs.setup_python
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          chmod +x infra/packages/pip.sh
          & (Join-Path ${{ steps.venv-win.outputs.virtual_env }} "Scripts\activate.ps1")
          ./infra/packages/pip.sh

      - name: Install Lua packages
        if: inputs.setup_lua
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          chmod +x infra/packages/luarocks.sh
          ./infra/packages/luarocks.sh

      - name: Install Neovim configuration
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          chmod +x infra/packages/nvim.sh
          ./infra/packages/nvim.sh

      - name: Full environment setup
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          chmod +x infra/ci-setup-windows.sh
          ./infra/ci-setup-windows.sh
