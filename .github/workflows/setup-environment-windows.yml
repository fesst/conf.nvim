name: Setup Windows Environment

on:
  workflow_call:
    inputs:
      setup_python:
        required: true
        type: boolean
        default: true
      setup_rust:
        required: true
        type: boolean
        default: true
      setup_node:
        required: true
        type: boolean
        default: true
      setup_lua:
        required: true
        type: boolean
        default: true
    outputs:
      virtual_env:
        description: "Path to virtual environment"
        value: ${{ jobs.setup-environment.outputs.virtual_env }}

jobs:
  setup-environment:
    name: Setup Environment
    runs-on: windows-latest
    outputs:
      virtual_env: ${{ steps.venv-win.outputs.virtual_env }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure npm cache directory exists
        if: inputs.setup_node
        shell: pwsh
        run: |
          $dir = "$env:USERPROFILE\.npm"
          if (-not (Test-Path $dir)) { New-Item -ItemType Directory -Path $dir }

      - name: Cache npm packages
        if: inputs.setup_node
        uses: actions/cache@v4
        with:
          path: ${{ format('{0}\\.npm', env.USERPROFILE) }}
          key: ${{ runner.os }}-${{ runner.arch }}-npm-${{ hashFiles('infra/packages/npm.ps1') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-npm-
            ${{ runner.os }}-${{ runner.arch }}-

      - name: Ensure pip cache directory exists
        if: inputs.setup_python
        shell: pwsh
        run: |
          $dir = "$env:LOCALAPPDATA\pip\Cache"
          if (-not (Test-Path $dir)) { New-Item -ItemType Directory -Path $dir -Force }

      - name: Cache pip packages
        if: inputs.setup_python
        uses: actions/cache@v4
        with:
          path: ${{ format('{0}\\pip\\Cache', env.LOCALAPPDATA) }}
          key: ${{ runner.os }}-${{ runner.arch }}-pip-${{ hashFiles('infra/packages/pip.ps1') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-pip-
            ${{ runner.os }}-${{ runner.arch }}-

      - name: Ensure cargo cache directories exist
        if: inputs.setup_rust
        shell: pwsh
        run: |
          $reg = "$env:USERPROFILE\.cargo\registry"
          $git = "$env:USERPROFILE\.cargo\git"
          if (-not (Test-Path $reg)) { New-Item -ItemType Directory -Path $reg }
          if (-not (Test-Path $git)) { New-Item -ItemType Directory -Path $git }

      - name: Cache Cargo packages
        if: inputs.setup_rust
        uses: actions/cache@v4
        with:
          path: |
            ${{ format('{0}\\.cargo\\registry', env.USERPROFILE) }}
            ${{ format('{0}\\.cargo\\git', env.USERPROFILE) }}
          key: ${{ runner.os }}-${{ runner.arch }}-cargo-${{ hashFiles('infra/packages/cargo.ps1') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-cargo-
            ${{ runner.os }}-${{ runner.arch }}-

      - name: Ensure luarocks cache directory exists
        if: inputs.setup_lua
        shell: pwsh
        run: |
          $dir = "$env:USERPROFILE\.cache\luarocks"
          if (-not (Test-Path $dir)) { New-Item -ItemType Directory -Path $dir }

      - name: Cache LuaRocks packages
        if: inputs.setup_lua
        uses: actions/cache@v4
        with:
          path: |
            ${{ format('{0}\\.cache\\luarocks', env.USERPROFILE) }}
            ${{ format('{0}\\.luarocks', env.USERPROFILE) }}
            ${{ format('{0}\\.local\\share\\luarocks', env.USERPROFILE) }}
          key: ${{ runner.os }}-${{ runner.arch }}-luarocks-${{ hashFiles('infra/packages/luarocks.ps1') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-luarocks-
            ${{ runner.os }}-${{ runner.arch }}-

      - name: Set up Python
        if: inputs.setup_python
        id: setup-python-win
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up Python virtual environment
        if: inputs.setup_python
        id: venv-win
        shell: pwsh
        run: |
          $VENV_PATH = Join-Path $env:GITHUB_WORKSPACE ".venv"

          # Clean up any existing virtual environment
          if (Test-Path $VENV_PATH) {
            Write-Output "Removing existing virtual environment..."
            Remove-Item -Recurse -Force $VENV_PATH
          }

          # Create virtual environment
          Write-Output "Creating virtual environment at: $VENV_PATH"
          python -m venv "$VENV_PATH"
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to create virtual environment"
            Write-Output "Python version: $(python --version)"
            Write-Output "Python path: $(Get-Command python).Source"
            Write-Output "PATH: $env:Path"
            exit 1
          }

          # Verify virtual environment creation
          if (-not (Test-Path $VENV_PATH)) {
            Write-Error "Virtual environment directory not created"
            Write-Output "Current directory: $(Get-Location)"
            Write-Output "Directory contents:"
            Get-ChildItem
            exit 1
          }

          # Set outputs and environment variables
          Write-Output "virtual_env=$VENV_PATH" >> $env:GITHUB_OUTPUT
          Write-Output "VIRTUAL_ENV=$VENV_PATH" >> $env:GITHUB_ENV
          Write-Output "$VENV_PATH\Scripts" >> $env:GITHUB_PATH
          Write-Output "PYTHONPATH=$VENV_PATH\Lib\site-packages;$env:PYTHONPATH" >> $env:GITHUB_ENV
          Write-Output "PIP_PREFIX=$VENV_PATH" >> $env:GITHUB_ENV
          Write-Output "PIP_TARGET=$VENV_PATH\Lib\site-packages" >> $env:GITHUB_ENV

          # Activate and upgrade pip
          & (Join-Path $VENV_PATH "Scripts\activate.ps1")
          python -m pip install --upgrade pip

      - name: Install Windows packages
        shell: pwsh
        run: |
          # Install Chocolatey if not present
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Write-Output "Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }

          # Import Chocolatey profile module
          Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
          refreshenv

          # Install Neovim and tree-sitter
          Write-Output "Installing Neovim and tree-sitter..."
          choco install neovim tree-sitter -y
          refreshenv

          # Add Neovim to PATH
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          $env:Path = "$env:Path;C:\tools\neovim\nvim-win64\bin"

          # Verify Neovim installation
          $nvimPath = Get-Command nvim -ErrorAction SilentlyContinue
          if (-not $nvimPath) {
            Write-Error "Neovim not found in PATH after installation"
            Write-Output "Current PATH: $env:Path"
            exit 1
          }
          Write-Output "Neovim found at: $($nvimPath.Source)"

      - name: Install Node.js packages
        if: inputs.setup_node
        shell: pwsh
        run: |
          $scriptPath = Join-Path $env:GITHUB_WORKSPACE "infra/packages/npm.ps1"
          for ($i = 1; $i -le 3; $i++) {
            if (& $scriptPath) {
              break
            }
            if ($i -eq 3) {
              Write-Error "Failed to install Node.js packages after 3 attempts"
              exit 1
            }
            Write-Output "Attempt $i failed. Retrying..."
            npm cache clean --force
          }

      - name: Install Rust packages
        if: inputs.setup_rust
        shell: pwsh
        run: |
          $scriptPath = Join-Path $env:GITHUB_WORKSPACE "infra/packages/cargo.ps1"
          for ($i = 1; $i -le 3; $i++) {
            if (& $scriptPath) {
              break
            }
            if ($i -eq 3) {
              Write-Error "Failed to install Rust packages after 3 attempts"
              exit 1
            }
            Write-Output "Attempt $i failed. Retrying..."
            cargo clean
          }

      - name: Install Python packages
        if: inputs.setup_python
        shell: pwsh
        run: |
          $venvPath = Join-Path $env:GITHUB_WORKSPACE ".venv"
          & (Join-Path $venvPath "Scripts\activate.ps1")
          $scriptPath = Join-Path $env:GITHUB_WORKSPACE "infra/packages/pip.ps1"
          for ($i = 1; $i -le 3; $i++) {
            if (& $scriptPath) {
              break
            }
            if ($i -eq 3) {
              Write-Error "Failed to install Python packages after 3 attempts"
              exit 1
            }
            Write-Output "Attempt $i failed. Retrying..."
            pip cache purge
          }

      - name: Install Lua packages
        if: inputs.setup_lua
        shell: pwsh
        run: |
          $scriptPath = Join-Path $env:GITHUB_WORKSPACE "infra/packages/luarocks.ps1"
          for ($i = 1; $i -le 3; $i++) {
            if (& $scriptPath) {
              break
            }
            if ($i -eq 3) {
              Write-Error "Failed to install Lua packages after 3 attempts"
              exit 1
            }
            Write-Output "Attempt $i failed. Retrying..."
            luarocks config --local lua_version 5.4
          }

      - name: Install Neovim configuration
        shell: pwsh
        run: |
          $scriptPath = Join-Path $env:GITHUB_WORKSPACE "infra/packages/nvim.ps1"
          for ($i = 1; $i -le 3; $i++) {
            if (& $scriptPath) {
              break
            }
            if ($i -eq 3) {
              Write-Error "Failed to install Neovim configuration after 3 attempts"
              exit 1
            }
            Write-Output "Attempt $i failed. Retrying..."
            Remove-Item -Recurse -Force "$env:USERPROFILE\.local\share\nvim"
          }
