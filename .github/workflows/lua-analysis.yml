name: "Lua Analysis"

permissions:
  contents: read

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  schedule:
    - cron: "33 12 * * 1"

jobs:
  setup:
    uses: ./.github/workflows/setup-environment.yml
    with:
      setup_python: true
      setup_rust: false
      setup_node: false
      setup_lua: true

  analyze:
    name: Analyze Lua
    needs: setup
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Create and activate virtual environment
        run: |
          python -m venv $GITHUB_WORKSPACE/.venv
          echo "VIRTUAL_ENV=$GITHUB_WORKSPACE/.venv" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH
          echo "PYTHONPATH=$GITHUB_WORKSPACE/.venv/lib/python3.12/site-packages:$PYTHONPATH" >> $GITHUB_ENV
          echo "PIP_TARGET=$GITHUB_WORKSPACE/.venv/lib/python3.12/site-packages" >> $GITHUB_ENV
          echo "PIP_PREFIX=$GITHUB_WORKSPACE/.venv" >> $GITHUB_ENV
          source $GITHUB_WORKSPACE/.venv/bin/activate
          python -m pip install --upgrade pip

      - name: Fetch commits
        run: |
          echo "Fetching base branch: ${{ github.base_ref }}"
          git fetch origin ${{ github.base_ref }} --depth=1 || true
          echo "Fetching commit: ${{ github.sha }}"
          git fetch origin ${{ github.sha }} --depth=1 || true
          echo "Current git refs:"
          git show-ref
          echo "Current git log:"
          git log --oneline -n 5

      - name: Check if tests should run (test/, infra/, *.lua)
        id: test_check
        run: |
          chmod +x infra/should_run_tests.sh || true
          bash infra/should_run_tests.sh ${{ github.base_ref }} ${{ github.sha }} || exit_code=$?
          case ${exit_code:-0} in
            0)
              echo "run_tests=true" >> $GITHUB_OUTPUT
              ;;
            1)
              echo "run_tests=false" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Unexpected error occurred (exit code: ${exit_code:-0}). Running tests to be safe."
              echo "run_tests=true" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Skip if no test/infra/.lua changes
        if: steps.test_check.outputs.run_tests == 'false'
        run: |
          echo "No test/infra/.lua changes. Skipping tests."
          exit 0

      - name: Install Neovim
        if: steps.test_check.outputs.run_tests == 'true'
        run: |
          brew install neovim

      - name: Cache Neovim plugins
        if: steps.test_check.outputs.run_tests == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/nvim
            ~/.config/nvim/plugin
            ~/.config/nvim/lazy
          key: ${{ runner.os }}-nvim-plugins-${{ hashFiles('lua/**/*.lua', 'after/plugin/**/*.lua', 'infra/packages/nvim.sh') }}
          restore-keys: |
            ${{ runner.os }}-nvim-plugins-

      - name: Install dependencies
        if: steps.test_check.outputs.run_tests == 'true'
        run: |
          chmod +x infra/install.sh
          source $GITHUB_WORKSPACE/.venv/bin/activate
          CI=true ./infra/install.sh

      - name: Update PATH
        if: steps.test_check.outputs.run_tests == 'true'
        run: |
          eval "$(/usr/libexec/path_helper)"

      - name: Run luacheck
        if: steps.test_check.outputs.run_tests == 'true'
        run: |
          source $GITHUB_WORKSPACE/.venv/bin/activate
          luarocks install luacheck
          luacheck lua/ after/plugin/ --codes --ranges --formatter plain

      - name: Run Neovim sanity tests
        if: steps.test_check.outputs.run_tests == 'true'
        run: |
          source $GITHUB_WORKSPACE/.venv/bin/activate
          bash infra/nvim_sanity_test.sh
