name: "Neovim Tests"

permissions:
  contents: read

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  schedule:
    - cron: "33 12 * * 1"

# Cancel in-progress runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    uses: ./.github/workflows/setup-environment.yml
    with:
      setup_python: true
      setup_rust: false
      setup_node: false
      setup_lua: true

  check-changes:
    name: Check for Changes
    needs: setup
    runs-on: macos-latest
    outputs:
      run_tests: ${{ steps.test_check.outputs.run_tests }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check if tests should run (test/, infra/, *.lua)
        id: test_check
        run: |
          chmod +x infra/should_run_tests.sh || true
          bash infra/should_run_tests.sh ${{ github.base_ref }} ${{ github.sha }} || exit_code=$?
          case ${exit_code:-0} in
            0)
              echo "run_tests=true" >> $GITHUB_OUTPUT
              ;;
            1)
              echo "run_tests=false" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Unexpected error occurred (exit code: ${exit_code:-0}). Running tests to be safe."
              echo "run_tests=true" >> $GITHUB_OUTPUT
              ;;
          esac

  test:
    name: Run Tests
    needs: [setup, check-changes]
    if: needs.check-changes.outputs.run_tests == 'true'
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up Python virtual environment
        run: |
          VENV_PATH="$GITHUB_WORKSPACE/.venv"
          python -m venv "$VENV_PATH"
          echo "VIRTUAL_ENV=$VENV_PATH" >> $GITHUB_ENV
          echo "$VENV_PATH/bin" >> $GITHUB_PATH
          echo "PYTHONPATH=$VENV_PATH/lib/python3.12/site-packages:$PYTHONPATH" >> $GITHUB_ENV
          source "$VENV_PATH/bin/activate"
          python -m pip install --upgrade pip

      - name: Cache Homebrew packages
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
            /opt/homebrew
            ~/Library/Logs/Homebrew
          key: ${{ runner.os }}-homebrew-${{ hashFiles('infra/packages/brew.sh') }}
          restore-keys: |
            ${{ runner.os }}-homebrew-

      - name: Cache LuaRocks packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/luarocks
            ~/.luarocks
            ~/.cache/luarocks-server
          key: ${{ runner.os }}-luarocks-${{ hashFiles('infra/packages/luarocks.sh') }}
          restore-keys: |
            ${{ runner.os }}-luarocks-

      - name: Cache Neovim plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/nvim
            ~/.config/nvim/plugin
            ~/.config/nvim/lazy
          key: ${{ runner.os }}-nvim-plugins-${{ hashFiles('lua/**/*.lua', 'after/plugin/**/*.lua', 'infra/packages/nvim.sh') }}
          restore-keys: |
            ${{ runner.os }}-nvim-plugins-

      - name: Install minimal dependencies
        run: |
          brew install neovim
          source $GITHUB_WORKSPACE/.venv/bin/activate
          CI=true ./infra/install.sh

      - name: Build and run tests
        run: |
          cat > Dockerfile << 'EOF'
          FROM ubuntu:22.04

          # Set noninteractive installation
          ENV DEBIAN_FRONTEND=noninteractive

          # Function to retry apt-get commands
          RUN echo '#!/bin/bash\n\
          max_attempts=3\n\
          attempt=1\n\
          while [ $attempt -le $max_attempts ]; do\n\
            echo "Attempt $attempt of $max_attempts"\n\
            if "$@"; then\n\
              break\n\
            fi\n\
            echo "Command failed. Retrying in 5 seconds..."\n\
            sleep 5\n\
            attempt=$((attempt + 1))\n\
          done\n\
          if [ $attempt -gt $max_attempts ]; then\n\
            echo "All attempts failed"\n\
            exit 1\n\
          fi' > /usr/local/bin/retry && chmod +x /usr/local/bin/retry

          # Update package lists and install basic dependencies
          RUN retry apt-get update -y && \
              retry apt-get install -y --no-install-recommends \
              curl \
              git \
              build-essential \
              cmake \
              pkg-config \
              libssl-dev \
              make \
              software-properties-common \
              gnupg \
              && rm -rf /var/lib/apt/lists/* || \
              (echo "apt-get failed. Full error:" && cat /var/log/apt/history.log && exit 1)

          # Set up Python with retry
          RUN retry apt-get update -y && \
              retry apt-get install -y --no-install-recommends \
              python3 \
              python3-pip \
              python3-venv \
              && rm -rf /var/lib/apt/lists/* || \
              (echo "apt-get failed. Full error:" && cat /var/log/apt/history.log && exit 1)

          # Set up Rust with retry
          RUN retry curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          ENV PATH="/root/.cargo/bin:${PATH}"

          # Set up Node.js with retry
          RUN retry curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
              retry apt-get update -y && \
              retry apt-get install -y --no-install-recommends nodejs && \
              rm -rf /var/lib/apt/lists/* || \
              (echo "apt-get failed. Full error:" && cat /var/log/apt/history.log && exit 1)

          # Set up Lua with retry
          RUN retry apt-get update -y && \
              retry apt-get install -y --no-install-recommends \
              lua5.4 \
              luarocks \
              && rm -rf /var/lib/apt/lists/* || \
              (echo "apt-get failed. Full error:" && cat /var/log/apt/history.log && exit 1)

          # Set up Neovim with retry
          RUN retry apt-get update -y && \
              retry apt-get install -y --no-install-recommends \
              software-properties-common \
              && add-apt-repository ppa:neovim-ppa/stable -y && \
              retry apt-get update -y && \
              retry apt-get install -y --no-install-recommends neovim && \
              rm -rf /var/lib/apt/lists/* || \
              (echo "apt-get failed. Full error:" && cat /var/log/apt/history.log && exit 1)

          # Set up workspace
          WORKDIR /workspace
          COPY . .

          # Create and activate virtual environment
          RUN python3 -m venv .venv
          ENV PATH="/workspace/.venv/bin:${PATH}"
          ENV VIRTUAL_ENV="/workspace/.venv"
          ENV PYTHONPATH="/workspace/.venv/lib/python3.10/site-packages"
          ENV PIP_TARGET="/workspace/.venv/lib/python3.10/site-packages"
          ENV PIP_PREFIX="/workspace/.venv"

          # Install Python dependencies with retry
          RUN retry pip install --no-cache-dir pynvim black flake8 isort

          # Install Lua dependencies with retry
          RUN retry luarocks install luacheck

          # Run tests
          CMD ["bash", "-c", "infra/nvim_sanity_test.sh"]
          EOF

          # Set up Docker Buildx
          docker buildx create --use

          # Build and run the container with caching
          docker buildx build \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --load \
            -t neovim-tests .

          # Run tests and capture output
          docker run --rm neovim-tests > test-results.log 2>&1 || test_exit_code=$?

          # Upload test results as artifact
          echo "Test results:"
          cat test-results.log

          # Upload test results as artifact
          if [ -f test-results.log ]; then
            echo "Uploading test results..."
            echo "::set-output name=test_results::$(cat test-results.log)"
          fi

          # Exit with the test exit code
          exit ${test_exit_code:-0}
